var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.268,1,1.566]],["body/controllers/AppController.html",[0,0.413,1,2.415,2,0.953,3,0.709,4,0.602,5,0.602,6,2.663,7,0.503,8,1.043,9,3.879,10,1.256,11,0.053,12,0.825,13,3.317,14,0.825,15,1.385,16,0.896,17,0.602,18,1.995,19,2.663,20,0.709,21,0.709,22,1.256,23,1.256,24,0.953,25,3.317,26,0.041,27,0.041]],["title/modules/AppModule.html",[28,1.355,29,1.566]],["body/modules/AppModule.html",[1,2.217,2,0.952,3,0.499,4,0.424,5,0.424,11,0.053,16,1.076,17,0.424,18,1.994,19,1.874,20,0.499,21,0.499,26,0.032,27,0.032,28,1.919,29,2.93,30,1.571,31,1.344,32,1.874,33,1.874,34,1.344,35,3.09,36,1.874,37,1.874,38,1.874,39,0.982,40,2.131,41,2.659,42,1.874,43,1.874,44,2.334,45,2.217,46,2.217,47,2.217,48,2.217,49,2.217,50,2.217,51,2.334,52,2.334,53,2.334,54,2.334,55,2.334,56,2.334,57,2.334,58,2.334,59,1.874,60,2.334]],["title/injectables/AppService.html",[18,1.18,61,1.03]],["body/injectables/AppService.html",[3,0.733,4,0.622,5,0.622,7,0.52,8,1.065,9,3.925,11,0.052,12,0.853,14,0.853,15,1.415,16,0.733,17,0.622,18,1.858,20,0.733,21,0.733,24,0.986,26,0.042,27,0.042,61,1.621,62,1.975,63,2.753,64,3.43,65,3.43,66,3.43,67,2.753,68,3.43,69,3.43,70,3.43]],["title/controllers/FormationController.html",[0,0.268,48,1.566]],["body/controllers/FormationController.html",[0,0.286,2,0.56,3,0.416,4,0.354,5,0.354,7,0.296,8,0.723,10,1.558,11,0.052,12,1.024,14,1.024,15,1.477,16,0.742,17,0.354,20,0.416,21,0.416,22,0.738,23,0.738,24,0.835,26,0.028,27,0.028,28,1.448,39,0.742,48,1.673,71,1.565,72,1.64,73,3.472,74,2.905,75,2.905,76,3.848,77,2.905,78,1.949,79,1.67,80,1.143,81,1.949,82,1.949,83,1.271,84,1.24,85,1.271,86,3.848,87,1.993,88,1.949,89,1.949,90,1.949,91,1.507,92,1.949,93,1.565,94,1.949,95,1.949,96,1.949,97,1.949,98,1.949,99,1.949,100,0.846,101,0.846,102,1.261,103,0.846,104,0.738,105,0.846,106,0.846,107,2.905,108,1.949,109,2.332,110,0.56,111,1.949,112,1.949,113,1.312,114,1.949,115,1.949,116,1.949,117,1.949,118,1.448,119,1.949,120,0.846,121,1.949,122,2,123,2.337,124,1.123,125,0.846,126,1.949,127,1.949,128,0.846]],["title/controllers/LessonController.html",[0,0.268,47,1.566]],["body/controllers/LessonController.html",[0,0.269,2,0.516,3,0.384,4,0.326,5,0.326,7,0.273,8,0.68,10,1.504,11,0.053,12,0.988,14,0.988,15,1.594,16,0.706,17,0.326,20,0.384,21,0.384,22,0.68,23,0.68,24,1.142,26,0.027,27,0.027,39,0.706,47,1.573,72,1.644,79,1.602,80,1.115,83,1.22,84,1.202,85,1.22,87,2.031,91,1.945,100,0.779,101,0.779,102,1.434,103,0.779,104,0.68,105,0.779,106,0.779,110,0.516,120,1.185,128,1.185,129,1.442,130,3.305,131,3.693,132,2.732,133,3.305,134,3.305,135,1.796,136,1.796,137,1.796,138,1.796,139,1.796,140,1.796,141,1.796,142,1.796,143,1.796,144,2.732,145,1.796,146,3.973,147,1.796,148,1.796,149,1.796,150,1.442,151,1.442,152,1.796,153,1.796,154,1.796,155,1.796,156,1.796,157,3.693,158,1.838,159,1.442,160,1.796,161,1.796,162,2.732,163,1.796,164,1.796,165,1.442,166,1.796,167,1.796,168,1.442,169,1.796]],["title/controllers/ModuleController.html",[0,0.268,46,1.566]],["body/controllers/ModuleController.html",[0,0.285,2,0.559,3,0.415,4,0.353,5,0.353,7,0.295,8,0.721,10,1.557,11,0.052,12,1.023,14,1.023,15,1.516,16,0.741,17,0.353,20,0.415,21,0.415,22,0.736,23,0.736,24,0.833,26,0.028,27,0.028,28,1.445,39,0.741,46,1.67,72,1.639,79,1.668,80,1.142,83,1.27,84,1.239,85,1.27,87,1.992,91,1.668,100,0.844,101,0.844,102,1.258,103,0.844,104,0.736,105,0.844,106,0.844,109,1.561,110,0.559,118,1.445,120,0.844,122,1.996,123,2.333,124,1.12,125,0.844,128,0.844,150,2.327,151,2.327,170,1.561,171,3.843,172,2.899,173,3.467,174,2.899,175,2.899,176,1.944,177,1.944,178,1.944,179,1.944,180,1.944,181,1.944,182,1.944,183,1.944,184,3.843,185,1.944,186,1.944,187,1.944,188,1.944,189,1.944,190,1.944,191,1.944,192,1.944,193,1.944,194,1.944,195,1.944,196,1.944,197,1.944,198,1.944,199,1.944,200,1.944]],["title/controllers/PermissionController.html",[0,0.268,49,1.566]],["body/controllers/PermissionController.html",[0,0.276,2,0.535,3,0.398,4,0.338,5,0.338,7,0.283,8,0.698,10,1.528,11,0.053,12,1.004,14,1.004,15,1.532,16,0.722,17,0.338,20,0.398,21,0.398,22,0.705,23,0.705,24,1.081,26,0.027,27,0.027,39,0.722,49,1.617,72,1.641,79,1.632,80,1.127,83,1.243,84,1.265,85,1.243,87,2.012,91,1.751,100,0.808,101,0.808,102,1.218,103,0.808,104,0.705,105,0.808,106,0.808,110,0.535,113,1.253,118,0.928,120,1.218,122,1.072,124,1.072,125,0.808,128,1.218,168,1.495,201,1.495,202,3.02,203,2.807,204,3.379,205,3.379,206,2.807,207,1.862,208,1.862,209,1.862,210,1.862,211,1.862,212,1.862,213,1.862,214,1.862,215,3.762,216,1.862,217,1.862,218,1.862,219,1.862,220,1.862,221,1.862,222,1.495,223,1.495,224,1.862,225,1.862,226,1.862,227,1.862,228,1.862,229,1.862,230,2.274,231,1.862,232,2.807,233,2.807,234,1.862,235,1.495,236,1.862,237,1.495,238,1.862]],["title/injectables/PrismaService.html",[39,0.581,61,1.03]],["body/injectables/PrismaService.html",[3,0.616,4,0.524,5,0.524,7,0.438,8,0.953,11,0.053,12,0.953,14,0.953,16,0.818,17,0.524,20,0.616,21,0.616,26,0.037,27,0.037,39,0.818,61,1.451,62,1.662,72,1.652,80,0.718,83,0.953,84,0.829,85,0.953,110,0.829,125,1.662,239,2.316,240,3.075,241,3.453,242,3.075,243,3.935,244,3.075,245,3.678,246,2.885,247,1.942,248,2.885,249,2.885,250,2.885,251,2.885,252,2.885]],["title/controllers/RoleController.html",[0,0.268,50,1.566]],["body/controllers/RoleController.html",[0,0.286,2,0.56,3,0.416,4,0.354,5,0.354,7,0.296,8,0.723,10,1.558,11,0.052,12,1.024,14,1.024,15,1.477,16,0.742,17,0.354,20,0.416,21,0.416,22,0.738,23,0.738,24,0.835,26,0.028,27,0.028,39,0.742,50,1.673,72,1.64,79,1.67,80,1.143,83,1.271,84,1.24,85,1.271,87,1.993,91,1.507,93,1.565,100,0.846,101,0.846,102,1.261,103,0.846,104,0.738,105,0.846,106,0.846,110,0.56,113,1.312,118,1.448,120,0.846,122,2,123,1.955,124,1.123,125,0.846,128,0.846,202,3.089,222,2.332,223,2.332,235,1.565,237,1.565,253,1.565,254,2.905,255,3.472,256,2.905,257,2.905,258,1.949,259,1.949,260,1.949,261,1.949,262,1.949,263,1.949,264,1.949,265,1.949,266,2.589,267,1.949,268,1.949,269,1.949,270,1.949,271,1.949,272,2.332,273,1.949,274,1.949,275,1.949,276,1.949,277,1.949,278,1.949,279,1.949,280,1.949,281,1.949,282,1.565]],["title/controllers/UserController.html",[0,0.268,45,1.566]],["body/controllers/UserController.html",[0,0.276,2,0.535,3,0.398,4,0.338,5,0.338,7,0.283,8,0.698,10,1.424,11,0.053,12,0.936,14,0.936,15,1.497,16,0.722,17,0.338,20,0.398,21,0.398,22,0.705,23,0.705,24,1.081,26,0.027,27,0.027,40,1.466,45,1.617,59,1.495,72,1.607,79,1.632,80,1.095,83,1.116,84,1.16,85,1.116,87,1.966,91,1.91,100,0.808,101,0.808,102,1.466,103,0.808,104,0.705,105,0.808,110,0.535,118,1.399,120,1.218,125,1.218,128,1.218,159,1.495,165,1.495,282,2.254,283,1.495,284,3.762,285,2.807,286,3.379,287,3.379,288,2.807,289,1.862,290,1.862,291,2.807,292,1.862,293,1.862,294,2.807,295,1.862,296,2.531,297,1.862,298,2.807,299,1.862,300,1.495,301,1.862,302,1.862,303,1.495,304,1.862,305,1.862,306,1.862,307,1.862,308,1.862,309,1.862,310,1.862,311,2.254,312,1.862,313,1.862,314,1.862]],["title/injectables/UserService.html",[40,1.18,61,1.03]],["body/injectables/UserService.html",[3,0.525,4,0.446,5,0.446,7,0.373,8,0.854,11,0.053,12,1.066,14,1.066,16,0.845,17,0.446,20,0.525,21,0.525,24,0.986,26,0.034,27,0.034,39,0.963,40,1.489,61,1.3,62,1.414,72,1.415,80,1.066,83,1.415,84,1.137,85,1.307,104,0.93,106,1.066,110,0.706,240,2.755,242,2.755,243,3.177,244,1.971,245,2.755,247,1.652,300,4.153,303,1.971,315,1.971,316,3.432,317,3.432,318,3.432,319,2.456,320,3.432,321,2.456,322,3.432,323,3.432,324,2.456,325,2.456,326,2.456,327,2.456,328,2.456]],["title/coverage.html",[329,2.478]],["body/coverage.html",[0,0.482,1,1.531,5,0.482,6,2.134,11,0.052,18,1.153,26,0.035,27,0.035,34,1.531,39,0.568,40,1.153,45,1.531,46,1.531,47,1.531,48,1.531,49,1.531,50,1.531,61,1.562,63,2.134,67,2.134,71,2.134,80,0.661,129,2.134,170,2.134,201,2.134,239,2.134,253,2.134,266,1.789,283,2.134,296,1.789,315,2.134,329,1.789,330,2.658,331,2.658,332,2.982,333,3.625,334,2.134,335,5.295,336,4.638,337,4.126,338,2.134,339,3.625,340,4.638,341,3.625,342,2.134,343,2.658,344,2.134,345,2.658,346,2.658]],["title/dependencies.html",[31,1.879,347,1.835]],["body/dependencies.html",[11,0.053,17,0.661,26,0.043,27,0.043,31,2.097,110,1.046,348,4.795,349,3.641,350,3.641,351,3.641,352,3.641,353,3.641,354,3.641,355,3.641,356,3.641,357,3.641,358,3.641,359,3.641,360,3.641,361,3.641]],["title/miscellaneous/functions.html",[362,1.316,363,2.619]],["body/miscellaneous/functions.html",[7,0.595,11,0.045,26,0.045,27,0.045,34,2.851,332,2.64,334,3.975,342,3.149,362,2.259,363,3.149,364,3.923,365,3.149]],["title/index.html",[7,0.347,366,2.286,367,2.286]],["body/index.html",[4,0.495,11,0.052,26,0.036,27,0.036,158,1.837,230,1.837,247,1.837,329,1.837,368,2.73,369,2.73,370,3.691,371,2.73,372,2.73,373,2.73,374,2.73,375,2.73,376,2.73,377,4.182,378,2.73,379,2.73,380,2.73,381,2.73,382,4.932,383,2.73,384,2.73,385,4.824,386,2.73,387,2.73,388,3.691,389,2.73,390,2.73,391,2.73,392,2.73,393,3.691,394,3.691,395,2.73,396,2.73,397,2.73,398,3.691,399,3.691,400,2.73,401,2.73,402,2.73,403,2.73,404,2.73,405,2.192,406,2.73,407,2.73,408,2.73,409,2.73,410,2.73,411,2.73,412,2.73,413,2.73,414,2.73,415,2.73,416,2.73,417,2.73,418,2.73,419,2.73,420,2.73,421,2.73,422,2.192]],["title/modules.html",[30,2.478]],["body/modules.html",[11,0.046,26,0.046,27,0.046,29,2.35,30,2.746,405,3.276,423,4.081,424,4.081,425,4.081]],["title/overview.html",[426,2.956]],["body/overview.html",[2,0.962,11,0.05,18,2.004,26,0.041,27,0.041,28,2.102,29,3.066,31,1.928,32,2.688,33,2.688,34,1.928,35,2.688,36,2.688,37,2.688,38,2.688,39,0.987,40,2.104,41,3.386,42,2.688,43,2.688,62,1.928,426,2.688,427,2.688,428,3.349,429,3.349]],["title/properties.html",[347,1.835,430,2.619]],["body/properties.html",[11,0.052,26,0.046,27,0.046,158,2.669,230,2.669,422,3.184,430,3.184,431,3.967,432,3.967,433,3.967]],["title/miscellaneous/variables.html",[362,1.316,434,2.619]],["body/miscellaneous/variables.html",[7,0.472,11,0.054,26,0.039,27,0.039,80,1.002,84,1.356,241,2.499,266,2.71,272,3.233,296,2.71,311,3.233,332,2.095,338,3.233,344,2.499,362,1.793,365,3.583,427,2.499,434,2.499,435,4.463,436,4.463,437,3.113,438,3.113,439,3.113,440,3.113,441,3.113,442,4.027,443,3.113,444,3.113]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":432,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":427,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["123",{"_index":442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":429,"title":{},"body":{"overview.html":{}}}],["4.15.0",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":428,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["8.11.0",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["admin",{"_index":438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alice",{"_index":441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allusers",{"_index":306,"title":{},"body":{"controllers/UserController.html":{}}}],["amazing",{"_index":406,"title":{},"body":{"index.html":{}}}],["api",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["app",{"_index":247,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["app.close",{"_index":252,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":376,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apprenant",{"_index":439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":72,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["author",{"_index":158,"title":{},"body":{"controllers/LessonController.html":{},"index.html":{},"properties.html":{}}}],["available",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["await",{"_index":125,"title":{},"body":{"controllers/FormationController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["backers",{"_index":407,"title":{},"body":{"index.html":{}}}],["bob",{"_index":443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":102,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":425,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":423,"title":{},"body":{"modules.html":{}}}],["building",{"_index":371,"title":{},"body":{"index.html":{}}}],["check",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["class",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["const",{"_index":118,"title":{},"body":{"controllers/FormationController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["content",{"_index":157,"title":{},"body":{"controllers/LessonController.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller/formation.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/lesson.controller",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/module.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/permission.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/role.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/user.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["coverage",{"_index":329,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["data",{"_index":120,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":104,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(\"lesson/delete/:id",{"_index":167,"title":{},"body":{"controllers/LessonController.html":{}}}],["delete(\"permission/delete/:id",{"_index":234,"title":{},"body":{"controllers/PermissionController.html":{}}}],["delete('formation/delete/:id",{"_index":89,"title":{},"body":{"controllers/FormationController.html":{}}}],["delete('lesson/delete/:id",{"_index":136,"title":{},"body":{"controllers/LessonController.html":{}}}],["delete('module/delete/:id",{"_index":186,"title":{},"body":{"controllers/ModuleController.html":{}}}],["delete('permission/delete/:id",{"_index":217,"title":{},"body":{"controllers/PermissionController.html":{}}}],["delete('role/delete/:id",{"_index":268,"title":{},"body":{"controllers/RoleController.html":{}}}],["deletelesson",{"_index":130,"title":{},"body":{"controllers/LessonController.html":{}}}],["deletelesson(id",{"_index":135,"title":{},"body":{"controllers/LessonController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":230,"title":{},"body":{"controllers/PermissionController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":384,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["e2e",{"_index":395,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":372,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":242,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["enableshutdownhooks(app",{"_index":244,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["endpoints",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":240,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["for(let",{"_index":122,"title":{},"body":{"controllers/FormationController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["formation",{"_index":107,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationcontroller",{"_index":48,"title":{"controllers/FormationController.html":{}},"body":{"modules/AppModule.html":{},"controllers/FormationController.html":{},"coverage.html":{}}}],["formationcreate",{"_index":73,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationcreate(formationdata",{"_index":78,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationdata",{"_index":86,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationdata.name",{"_index":121,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationdelete",{"_index":74,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationdelete(id",{"_index":88,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationid",{"_index":127,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationmodel",{"_index":108,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationupdate",{"_index":75,"title":{},"body":{"controllers/FormationController.html":{}}}],["formationupdate(id",{"_index":92,"title":{},"body":{"controllers/FormationController.html":{}}}],["framework",{"_index":370,"title":{},"body":{"index.html":{}}}],["function",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":363,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(\"formation/:id",{"_index":111,"title":{},"body":{"controllers/FormationController.html":{}}}],["get(\"formations",{"_index":115,"title":{},"body":{"controllers/FormationController.html":{}}}],["get(\"lesson/:id",{"_index":152,"title":{},"body":{"controllers/LessonController.html":{}}}],["get(\"lessons",{"_index":155,"title":{},"body":{"controllers/LessonController.html":{}}}],["get(\"module/:id",{"_index":191,"title":{},"body":{"controllers/ModuleController.html":{}}}],["get(\"modules",{"_index":194,"title":{},"body":{"controllers/ModuleController.html":{}}}],["get(\"permission/:id",{"_index":224,"title":{},"body":{"controllers/PermissionController.html":{}}}],["get(\"permissions",{"_index":227,"title":{},"body":{"controllers/PermissionController.html":{}}}],["get(\"role/:id",{"_index":274,"title":{},"body":{"controllers/RoleController.html":{}}}],["get(\"roles",{"_index":277,"title":{},"body":{"controllers/RoleController.html":{}}}],["get('formation/:id",{"_index":98,"title":{},"body":{"controllers/FormationController.html":{}}}],["get('formations",{"_index":95,"title":{},"body":{"controllers/FormationController.html":{}}}],["get('lesson/:id",{"_index":141,"title":{},"body":{"controllers/LessonController.html":{}}}],["get('lessons",{"_index":138,"title":{},"body":{"controllers/LessonController.html":{}}}],["get('module/:id",{"_index":179,"title":{},"body":{"controllers/ModuleController.html":{}}}],["get('modules",{"_index":176,"title":{},"body":{"controllers/ModuleController.html":{}}}],["get('permission/:id",{"_index":210,"title":{},"body":{"controllers/PermissionController.html":{}}}],["get('permissions",{"_index":207,"title":{},"body":{"controllers/PermissionController.html":{}}}],["get('role/:id",{"_index":261,"title":{},"body":{"controllers/RoleController.html":{}}}],["get('roles",{"_index":258,"title":{},"body":{"controllers/RoleController.html":{}}}],["get('user/:id",{"_index":291,"title":{},"body":{"controllers/UserController.html":{}}}],["get('users",{"_index":288,"title":{},"body":{"controllers/UserController.html":{}}}],["getallformation",{"_index":76,"title":{},"body":{"controllers/FormationController.html":{}}}],["getalllessons",{"_index":131,"title":{},"body":{"controllers/LessonController.html":{}}}],["getallmodules",{"_index":171,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getallrole",{"_index":202,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["getallusers",{"_index":284,"title":{},"body":{"controllers/UserController.html":{}}}],["getformationbyid",{"_index":77,"title":{},"body":{"controllers/FormationController.html":{}}}],["getformationbyid(@param(\"id",{"_index":112,"title":{},"body":{"controllers/FormationController.html":{}}}],["getformationbyid(id",{"_index":97,"title":{},"body":{"controllers/FormationController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlessonbyid",{"_index":132,"title":{},"body":{"controllers/LessonController.html":{}}}],["getlessonbyid(@param('id",{"_index":153,"title":{},"body":{"controllers/LessonController.html":{}}}],["getlessonbyid(id",{"_index":140,"title":{},"body":{"controllers/LessonController.html":{}}}],["getmodulebyid",{"_index":172,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getmodulebyid(@param(\"id",{"_index":192,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getmodulebyid(id",{"_index":178,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getpermissionbyid",{"_index":203,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getpermissionbyid(@param(\"id",{"_index":225,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getpermissionbyid(id",{"_index":209,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getrolebyid",{"_index":254,"title":{},"body":{"controllers/RoleController.html":{}}}],["getrolebyid(@param(\"id",{"_index":275,"title":{},"body":{"controllers/RoleController.html":{}}}],["getrolebyid(id",{"_index":260,"title":{},"body":{"controllers/RoleController.html":{}}}],["getting",{"_index":366,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":285,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(@param('id",{"_index":302,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":290,"title":{},"body":{"controllers/UserController.html":{}}}],["grow",{"_index":402,"title":{},"body":{"index.html":{}}}],["here",{"_index":413,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":419,"title":{},"body":{"index.html":{}}}],["i=0",{"_index":237,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["i=0;i",{"_index":123,"title":{},"body":{"controllers/FormationController.html":{},"controllers/ModuleController.html":{},"controllers/RoleController.html":{}}}],["id",{"_index":91,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["id:string",{"_index":113,"title":{},"body":{"controllers/FormationController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["identifier",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":249,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":245,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":323,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":61,"title":{"injectables/AppService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":381,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":383,"title":{},"body":{"index.html":{}}}],["join",{"_index":409,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":416,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["lesson",{"_index":150,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{}}}],["lessoncontroller",{"_index":47,"title":{"controllers/LessonController.html":{}},"body":{"modules/AppModule.html":{},"controllers/LessonController.html":{},"coverage.html":{}}}],["lessoncreate",{"_index":133,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessoncreate(lessondata",{"_index":143,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata",{"_index":146,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata.author",{"_index":163,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata.content",{"_index":162,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata?.name",{"_index":161,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessonmodel",{"_index":151,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{}}}],["license",{"_index":422,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":399,"title":{},"body":{"index.html":{}}}],["list",{"_index":68,"title":{},"body":{"injectables/AppService.html":{}}}],["literal",{"_index":79,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["main",{"_index":334,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":362,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":398,"title":{},"body":{"index.html":{}}}],["mode",{"_index":388,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/FormationController.html":{},"controllers/ModuleController.html":{},"overview.html":{}}}],["modulecontroller",{"_index":46,"title":{"controllers/ModuleController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ModuleController.html":{},"coverage.html":{}}}],["modulecreate",{"_index":173,"title":{},"body":{"controllers/ModuleController.html":{}}}],["modulecreate(moduledata",{"_index":181,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledata",{"_index":184,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledata?.name",{"_index":198,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledelete",{"_index":174,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledelete(id",{"_index":185,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduleid",{"_index":200,"title":{},"body":{"controllers/ModuleController.html":{}}}],["modulemodel",{"_index":109,"title":{},"body":{"controllers/FormationController.html":{},"controllers/ModuleController.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["moduleupdate",{"_index":175,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduleupdate(id",{"_index":188,"title":{},"body":{"controllers/ModuleController.html":{}}}],["more",{"_index":412,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":417,"title":{},"body":{"index.html":{}}}],["name",{"_index":84,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":377,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":421,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":344,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":369,"title":{},"body":{"index.html":{}}}],["npm",{"_index":382,"title":{},"body":{"index.html":{}}}],["number",{"_index":159,"title":{},"body":{"controllers/LessonController.html":{},"controllers/UserController.html":{}}}],["number(id",{"_index":128,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["onmoduleinit",{"_index":243,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["open",{"_index":400,"title":{},"body":{"index.html":{}}}],["optional",{"_index":85,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["overview",{"_index":426,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":347,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":100,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["param(\"id",{"_index":168,"title":{},"body":{"controllers/LessonController.html":{},"controllers/PermissionController.html":{}}}],["param('id",{"_index":165,"title":{},"body":{"controllers/LessonController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password",{"_index":311,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["permission",{"_index":222,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["permissioncontroller",{"_index":49,"title":{"controllers/PermissionController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PermissionController.html":{},"coverage.html":{}}}],["permissioncreate",{"_index":204,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissioncreate(permissiondata",{"_index":212,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondata",{"_index":215,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondata.description",{"_index":233,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondata.name",{"_index":232,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondelete",{"_index":205,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondelete(id",{"_index":216,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionid",{"_index":236,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionmodel",{"_index":223,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["permissionupdate",{"_index":206,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionupdate(id",{"_index":219,"title":{},"body":{"controllers/PermissionController.html":{}}}],["pg",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":410,"title":{},"body":{"index.html":{}}}],["post",{"_index":101,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["post(\"formation/create",{"_index":117,"title":{},"body":{"controllers/FormationController.html":{}}}],["post(\"module/create",{"_index":196,"title":{},"body":{"controllers/ModuleController.html":{}}}],["post(\"permission/create",{"_index":229,"title":{},"body":{"controllers/PermissionController.html":{}}}],["post(\"role/create",{"_index":279,"title":{},"body":{"controllers/RoleController.html":{}}}],["post('formation/create",{"_index":81,"title":{},"body":{"controllers/FormationController.html":{}}}],["post('lesson/create",{"_index":144,"title":{},"body":{"controllers/LessonController.html":{}}}],["post('module/create",{"_index":182,"title":{},"body":{"controllers/ModuleController.html":{}}}],["post('permission/create",{"_index":213,"title":{},"body":{"controllers/PermissionController.html":{}}}],["post('role/create",{"_index":264,"title":{},"body":{"controllers/RoleController.html":{}}}],["post('user/signup",{"_index":298,"title":{},"body":{"controllers/UserController.html":{}}}],["prisma",{"_index":338,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prisma.rolecreateinput",{"_index":437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma.service",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma.usercreateinput",{"_index":440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prisma/.../seed.ts",{"_index":365,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":110,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/seed.ts",{"_index":332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":241,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaservice",{"_index":39,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["prismaservice:12",{"_index":324,"title":{},"body":{"injectables/UserService.html":{}}}],["prismaservice:8",{"_index":325,"title":{},"body":{"injectables/UserService.html":{}}}],["production",{"_index":390,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":368,"title":{},"body":{"index.html":{}}}],["project",{"_index":401,"title":{},"body":{"index.html":{}}}],["promise",{"_index":87,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["properties",{"_index":430,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["put",{"_index":103,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["put(\"lesson/update/:id",{"_index":164,"title":{},"body":{"controllers/LessonController.html":{}}}],["put('formation/update/:id",{"_index":93,"title":{},"body":{"controllers/FormationController.html":{},"controllers/RoleController.html":{}}}],["put('lesson/update/:id",{"_index":148,"title":{},"body":{"controllers/LessonController.html":{}}}],["put('module/update/:id",{"_index":189,"title":{},"body":{"controllers/ModuleController.html":{}}}],["put('permission/update/:id",{"_index":220,"title":{},"body":{"controllers/PermissionController.html":{}}}],["put('user/:id/role/set",{"_index":294,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":105,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["read",{"_index":411,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["reflect",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["relation",{"_index":124,"title":{},"body":{"controllers/FormationController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["repository",{"_index":380,"title":{},"body":{"index.html":{}}}],["reset",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":272,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["rolecontroller",{"_index":50,"title":{"controllers/RoleController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["rolecreate",{"_index":255,"title":{},"body":{"controllers/RoleController.html":{}}}],["rolecreate(roledata",{"_index":263,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledata",{"_index":266,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledata.name",{"_index":281,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledelete",{"_index":256,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledelete(id",{"_index":267,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":282,"title":{},"body":{"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["rolemodel",{"_index":273,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleupdate",{"_index":257,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleupdate(id",{"_index":270,"title":{},"body":{"controllers/RoleController.html":{}}}],["run",{"_index":385,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":373,"title":{},"body":{"index.html":{}}}],["server",{"_index":374,"title":{},"body":{"index.html":{}}}],["service/user.service",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["setuserrole",{"_index":286,"title":{},"body":{"controllers/UserController.html":{}}}],["setuserrole(userdata",{"_index":293,"title":{},"body":{"controllers/UserController.html":{}}}],["side",{"_index":375,"title":{},"body":{"index.html":{}}}],["signupuser",{"_index":287,"title":{},"body":{"controllers/UserController.html":{}}}],["signupuser(userdata",{"_index":297,"title":{},"body":{"controllers/UserController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":404,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["src/controller/formation.controller.ts",{"_index":71,"title":{},"body":{"controllers/FormationController.html":{},"coverage.html":{}}}],["src/controller/formation.controller.ts:21",{"_index":99,"title":{},"body":{"controllers/FormationController.html":{}}}],["src/controller/formation.controller.ts:26",{"_index":96,"title":{},"body":{"controllers/FormationController.html":{}}}],["src/controller/formation.controller.ts:31",{"_index":82,"title":{},"body":{"controllers/FormationController.html":{}}}],["src/controller/formation.controller.ts:56",{"_index":90,"title":{},"body":{"controllers/FormationController.html":{}}}],["src/controller/formation.controller.ts:75",{"_index":94,"title":{},"body":{"controllers/FormationController.html":{}}}],["src/controller/lesson.controller.ts",{"_index":129,"title":{},"body":{"controllers/LessonController.html":{},"coverage.html":{}}}],["src/controller/lesson.controller.ts:19",{"_index":142,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:24",{"_index":139,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:29",{"_index":145,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:44",{"_index":149,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:62",{"_index":137,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/module.controller.ts",{"_index":170,"title":{},"body":{"controllers/ModuleController.html":{},"coverage.html":{}}}],["src/controller/module.controller.ts:22",{"_index":180,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:27",{"_index":177,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:32",{"_index":183,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:57",{"_index":187,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:76",{"_index":190,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/permission.controller.ts",{"_index":201,"title":{},"body":{"controllers/PermissionController.html":{},"coverage.html":{}}}],["src/controller/permission.controller.ts:19",{"_index":211,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:24",{"_index":208,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:29",{"_index":214,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:44",{"_index":218,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:63",{"_index":221,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/role.controller.ts",{"_index":253,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/controller/role.controller.ts:22",{"_index":262,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:27",{"_index":259,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:32",{"_index":265,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:57",{"_index":269,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:76",{"_index":271,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/user.controller.ts",{"_index":283,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/controller/user.controller.ts:19",{"_index":292,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:27",{"_index":289,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:33",{"_index":295,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:48",{"_index":299,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma.service",{"_index":106,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"injectables/UserService.html":{}}}],["src/prisma.service.ts",{"_index":239,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:12",{"_index":246,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:8",{"_index":248,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/service/user.service.ts",{"_index":315,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/service/user.service.ts:13",{"_index":321,"title":{},"body":{"injectables/UserService.html":{}}}],["src/service/user.service.ts:8",{"_index":319,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":386,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":389,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":391,"title":{},"body":{"index.html":{}}}],["started",{"_index":367,"title":{"index.html":{}},"body":{}}],["starter",{"_index":379,"title":{},"body":{"index.html":{}}}],["statements",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":414,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["strip_password",{"_index":316,"title":{},"body":{"injectables/UserService.html":{}}}],["strip_password(user",{"_index":318,"title":{},"body":{"injectables/UserService.html":{}}}],["strip_passwords",{"_index":317,"title":{},"body":{"injectables/UserService.html":{}}}],["strip_passwords(users",{"_index":320,"title":{},"body":{"injectables/UserService.html":{}}}],["support",{"_index":405,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":424,"title":{},"body":{"modules.html":{}}}],["table",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":394,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":397,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":396,"title":{},"body":{"index.html":{}}}],["tests",{"_index":393,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":403,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":250,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":251,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.prismaservice.formation.create",{"_index":119,"title":{},"body":{"controllers/FormationController.html":{}}}],["this.prismaservice.formation.findmany",{"_index":116,"title":{},"body":{"controllers/FormationController.html":{}}}],["this.prismaservice.formation.findunique({where:{id:number(id",{"_index":114,"title":{},"body":{"controllers/FormationController.html":{}}}],["this.prismaservice.formationmodule.findmany",{"_index":126,"title":{},"body":{"controllers/FormationController.html":{}}}],["this.prismaservice.lesson.create",{"_index":160,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.delete",{"_index":169,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.findmany",{"_index":156,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.findunique({where:{id:number(id",{"_index":154,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.update",{"_index":166,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.module.create",{"_index":197,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.module.findmany",{"_index":195,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.module.findunique({where:{id:number(id",{"_index":193,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.modulelesson.findmany",{"_index":199,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.permission.create",{"_index":231,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.findmany",{"_index":228,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.findunique({where:{id:number(id",{"_index":226,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.update",{"_index":238,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.role.create",{"_index":280,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.role.findmany",{"_index":278,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.role.findunique({where:{id:number(id",{"_index":276,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.rolepermission.findmany",{"_index":235,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["this.strip_password(u",{"_index":328,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.strip_password(u",{"_index":305,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.strip_passwords(allusers",{"_index":308,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.create",{"_index":312,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.findmany",{"_index":307,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.findunique",{"_index":304,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.update",{"_index":309,"title":{},"body":{"controllers/UserController.html":{}}}],["touch",{"_index":415,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":420,"title":{},"body":{"index.html":{}}}],["type",{"_index":80,"title":{},"body":{"controllers/FormationController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":378,"title":{},"body":{"index.html":{}}}],["u",{"_index":303,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unit",{"_index":392,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":433,"title":{},"body":{"properties.html":{}}}],["updatelesson",{"_index":134,"title":{},"body":{"controllers/LessonController.html":{}}}],["updatelesson(id",{"_index":147,"title":{},"body":{"controllers/LessonController.html":{}}}],["user",{"_index":300,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user[\"password",{"_index":326,"title":{},"body":{"injectables/UserService.html":{}}}],["usercontroller",{"_index":45,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["userdata",{"_index":296,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userdata.name",{"_index":313,"title":{},"body":{"controllers/UserController.html":{}}}],["userdata.password",{"_index":314,"title":{},"body":{"controllers/UserController.html":{}}}],["userdata.roleid",{"_index":310,"title":{},"body":{"controllers/UserController.html":{}}}],["usermodel",{"_index":301,"title":{},"body":{"controllers/UserController.html":{}}}],["users",{"_index":322,"title":{},"body":{"injectables/UserService.html":{}}}],["users.foreach(u",{"_index":327,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":40,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["value",{"_index":436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":434,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":431,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":387,"title":{},"body":{"index.html":{}}}],["website",{"_index":418,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":408,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            UserController\n                        \n                        \n                            ModuleController\n                        \n                        \n                            LessonController\n                        \n                        \n                            FormationController\n                        \n                        \n                            PermissionController\n                        \n                        \n                            RoleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { UserController } from './controller/user.controller';\nimport { ModuleController } from \"./controller/module.controller\";\nimport { LessonController } from \"./controller/lesson.controller\";\nimport { FormationController } from \"./controller/formation.controller\";\nimport { RoleController } from \"./controller/role.controller\";\nimport { PermissionController } from './controller/permission.controller';\n\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma.service';\nimport { UserService } from './service/user.service';\n\n\n\n@Module({\n  imports: [],\n  controllers: [\n    AppController,\n    UserController,\n    ModuleController,\n    LessonController,\n    FormationController,\n    PermissionController,\n    RoleController\n  ],\n  providers: [\n    AppService,\n    UserService,\n    PrismaService,\n    UserService\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Check the API documentation for a list of available endpoints';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FormationController.html":{"url":"controllers/FormationController.html","title":"controller - FormationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FormationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/formation.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                formationCreate\n                            \n                            \n                                    \n                                    Async\n                                formationDelete\n                            \n                            \n                                    \n                                    Async\n                                formationUpdate\n                            \n                            \n                                    \n                                    Async\n                                getAllFormation\n                            \n                            \n                                    \n                                    Async\n                                getFormationById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        formationCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    formationCreate(formationData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('formation/create')\n                \n            \n\n            \n                \n                    Defined in src/controller/formation.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    formationData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        formationDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    formationDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('formation/delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/formation.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        formationUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    formationUpdate(id: string, formationData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('formation/update/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/formation.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formationData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllFormation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllFormation()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('formations')\n                \n            \n\n            \n                \n                    Defined in src/controller/formation.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getFormationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFormationById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('formation/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/formation.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Query\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Formation as FormationModel,\n    Module as ModuleModel\n} from \"@prisma/client\"\n\n@Controller()\nexport class FormationController{\n    constructor(private readonly prismaService: PrismaService){}\n    @Get(\"formation/:id\")\n    async getFormationById(@Param(\"id\") id:string): Promise{\n        return this.prismaService.formation.findUnique({where:{id:Number(id)}})\n    }\n\n    @Get(\"formations\")\n    async getAllFormation(): Promise{\n        return this.prismaService.formation.findMany()\n    }\n\n    @Post(\"formation/create\")\n    async formationCreate(\n        @Body() formationData: {\n            name: string,\n            module: ModuleModel[]\n        }\n    ): Promise{\n        const formation = this.prismaService.formation.create({\n            data:{\n                name: formationData.name\n            }\n        });\n\n        for(let i=0;i{\n        const relation = await this.prismaService.formationModule.findMany({\n            where: {formationId: Number(id)}\n        })\n        \n        for(let i=0;i{\n        for(let i=0;i\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LessonController.html":{"url":"controllers/LessonController.html","title":"controller - LessonController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LessonController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/lesson.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteLesson\n                            \n                            \n                                    \n                                    Async\n                                getAllLessons\n                            \n                            \n                                    \n                                    Async\n                                getLessonById\n                            \n                            \n                                    \n                                    Async\n                                lessonCreate\n                            \n                            \n                                    \n                                    Async\n                                updateLesson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        deleteLesson\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLesson(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('lesson/delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllLessons\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLessons()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('lessons')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getLessonById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLessonById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('lesson/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        lessonCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    lessonCreate(lessonData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('lesson/create')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lessonData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        updateLesson\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLesson(id: string, lessonData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('lesson/update/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lessonData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Query\n} from '@nestjs/common'\nimport { PrismaService } from 'src/prisma.service'\nimport { Lesson as LessonModel } from '@prisma/client'\n\n@Controller()\nexport class LessonController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Get(\"lesson/:id\")\n    async getLessonById(@Param('id') id: string): Promise{\n        return this.prismaService.lesson.findUnique({where:{id:Number(id)}})\n    }\n\n    @Get(\"lessons\")\n    async getAllLessons(): Promise{\n        return this.prismaService.lesson.findMany()\n    }\n\n    @Post('lesson/create')\n    async lessonCreate(\n        @Body() lessonData: {\n            name?: string; content: string; author: number\n        }\n    ): Promise{\n        return this.prismaService.lesson.create({\n            data:{\n                name: lessonData?.name,\n                content: lessonData.content,\n                author: lessonData.author\n            }\n        })\n    }\n\n    @Put(\"lesson/update/:id\")\n    async updateLesson(\n        @Param('id') id: string,\n        @Body() lessonData:{\n            content: string\n        }\n        ): Promise{\n        \n        return this.prismaService.lesson.update({\n            where: {\n                id: Number(id)\n            },\n            data: {\n                content: lessonData.content\n            }\n        })\n    }\n\n    @Delete(\"lesson/delete/:id\")\n    async deleteLesson(\n        @Param(\"id\") id: string\n    ): Promise{\n        return this.prismaService.lesson.delete({\n            where: {id: Number(id)}\n        })\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ModuleController.html":{"url":"controllers/ModuleController.html","title":"controller - ModuleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ModuleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/module.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAllModules\n                            \n                            \n                                    \n                                    Async\n                                getModuleById\n                            \n                            \n                                    \n                                    Async\n                                moduleCreate\n                            \n                            \n                                    \n                                    Async\n                                moduleDelete\n                            \n                            \n                                    \n                                    Async\n                                moduleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllModules\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllModules()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('modules')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getModuleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getModuleById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('module/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        moduleCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleCreate(moduleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('module/create')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    moduleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        moduleDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('module/delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        moduleUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleUpdate(id: string, moduleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('module/update/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moduleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Query\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Module as ModuleModel,\n    Lesson as LessonModel,\n} from \"@prisma/client\"\n\n@Controller()\nexport class ModuleController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Get(\"module/:id\")\n    async getModuleById(@Param(\"id\") id: string): Promise{\n        return this.prismaService.module.findUnique({where:{id:Number(id)}})\n    }\n\n    @Get(\"modules\")\n    async getAllModules(): Promise{\n        return this.prismaService.module.findMany()\n    }\n\n    @Post(\"module/create\")\n    async moduleCreate(\n        @Body() moduleData: {\n            name?: string;\n            lesson: LessonModel[]\n        }\n    ): Promise{\n        const module = this.prismaService.module.create({\n            data:{\n                name: moduleData?.name,\n            }\n        });\n\n        for(let i=0;i{\n        const relation = await this.prismaService.moduleLesson.findMany({\n            where: {moduleId: Number(id)}\n        })\n        \n        for(let i=0;i{\n        for(let i=0;i\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionController.html":{"url":"controllers/PermissionController.html","title":"controller - PermissionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/permission.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAllRole\n                            \n                            \n                                    \n                                    Async\n                                getPermissionById\n                            \n                            \n                                    \n                                    Async\n                                permissionCreate\n                            \n                            \n                                    \n                                    Async\n                                permissionDelete\n                            \n                            \n                                    \n                                    Async\n                                permissionUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRole()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('permissions')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getPermissionById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPermissionById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('permission/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        permissionCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    permissionCreate(permissionData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('permission/create')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissionData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        permissionDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    permissionDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('permission/delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        permissionUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    permissionUpdate(id: string, permissionData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('permission/update/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissionData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Query\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport { Permission as PermissionModel } from \"@prisma/client\"\n\n@Controller()\nexport class PermissionController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Get(\"permission/:id\")\n    async getPermissionById(@Param(\"id\") id:string): Promise{\n        return this.prismaService.permission.findUnique({where:{id:Number(id)}})\n    }\n\n    @Get(\"permissions\")\n    async getAllRole(): Promise{\n        return this.prismaService.permission.findMany()\n    }\n\n    @Post(\"permission/create\")\n    async permissionCreate(\n        @Body() permissionData: {\n            name: string,\n            description: string\n        } \n    ): Promise{\n        return this.prismaService.permission.create({\n            data:{\n                name: permissionData.name,\n                description: permissionData.description\n            }\n        });\n    }\n\n    @Delete(\"permission/delete/:id\")\n    async permissionDelete(\n        @Param(\"id\") id: string\n    ): Promise{\n        const relation = await this.prismaService.rolePermission.findMany({\n            where: {permissionId: Number(id)}\n        });\n\n        for(let i=0; i{\n        return this.prismaService.permission.update({\n            where: {id: Number(id)},\n            data: {\n                name: permissionData.name,\n                description: permissionData.description\n            }\n        })\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, INestApplication } from '@nestjs/common'\nimport { PrismaClient } from '@prisma/client'\n\n@Injectable()\nexport class PrismaService extends PrismaClient\n  implements OnModuleInit {\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });    \n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/role.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAllRole\n                            \n                            \n                                    \n                                    Async\n                                getRoleById\n                            \n                            \n                                    \n                                    Async\n                                roleCreate\n                            \n                            \n                                    \n                                    Async\n                                roleDelete\n                            \n                            \n                                    \n                                    Async\n                                roleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRole()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('roles')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getRoleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoleById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('role/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        roleCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    roleCreate(roleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('role/create')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        roleDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    roleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('role/delete/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        roleUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    roleUpdate(id: string, roleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('formation/update/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Query\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Role as RoleModel,\n    Permission as PermissionModel\n} from \"@prisma/client\"\n\n@Controller()\nexport class RoleController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Get(\"role/:id\")\n    async getRoleById(@Param(\"id\") id:string): Promise{\n        return this.prismaService.role.findUnique({where:{id:Number(id)}})\n    }\n\n    @Get(\"roles\")\n    async getAllRole(): Promise{\n        return this.prismaService.role.findMany()\n    }\n\n    @Post(\"role/create\")\n    async roleCreate(\n        @Body() roleData: {\n            name: string,\n            permission: PermissionModel[]\n        }\n    ): Promise{\n        const role = this.prismaService.role.create({\n            data:{\n                name: roleData.name\n            }\n        });\n\n        for(let i=0;i{\n        const relation = await this.prismaService.rolePermission.findMany({\n            where: {roleId: Number(id)}\n        });\n\n        for(let i=0; i{\n        for(let i=0;i\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/user.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    Async\n                                setUserRole\n                            \n                            \n                                    \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:id')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        setUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserRole(userData: literal type, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('user/:id/role/set')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupUser(userData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user/signup')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tParam,\n\tPost,\n\tBody,\n\tPut,\n\tDelete,\n\tQuery,\n  } from '@nestjs/common'\n  import { UserService } from '../service/user.service'\n  import { User as UserModel } from '@prisma/client'\n  \n  @Controller()\n  export class UserController {\n\tconstructor(private readonly userService: UserService) { }\n  \n\t@Get('user/:id')\n\tasync getUserById(@Param('id') id: string): Promise {\n\t\tconst u = await this.userService.user.findUnique({ \n\t\t\twhere: { id: Number(id)\t}\n\t\t})\n\t\treturn this.userService.strip_password(u)\n\t}\n  \n\t@Get('users')\n\tasync getAllUsers(): Promise {\n\t  const allUsers = await this.userService.user.findMany()\n\t  return this.userService.strip_passwords(allUsers)\n\t}\n\n\t@Put('user/:id/role/set')\n\tasync setUserRole(\n\t\t@Body() userData: { roleId: number },\n\t\t@Param('id') id: string\n\t): Promise {\n\t  return this.userService.user.update({\n\t\twhere: {\n\t\t  id: Number(id)\n\t\t},\n\t\tdata: {\n\t\t\troleId: userData.roleId\n\t\t},\n\t  })\n\t}\n\n\t@Post('user/signup')\n\tasync signupUser(\n\t  @Body() userData: { name: string; password: string },\n\t): Promise {\n\t  return this.userService.user.create({\n\t\tdata: {\n\t\t  name: userData.name,\n\t\t  password: userData.password,\n\t\t},\n\t  })\n\t}\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                strip_password\n                            \n                            \n                                strip_passwords\n                            \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        strip_password\n                        \n                    \n                \n            \n            \n                \nstrip_password(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/service/user.service.ts:8\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        User\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        strip_passwords\n                        \n                    \n                \n            \n            \n                \nstrip_passwords(users: User[])\n                \n            \n\n\n            \n                \n                    Defined in src/service/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    users\n                                    \n                                            User[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     User[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Inherited from         PrismaService\n\n                \n            \n            \n                \n                        Defined in         PrismaService:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Inherited from         PrismaService\n\n                \n            \n            \n                \n                        Defined in         PrismaService:8\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { User } from '@prisma/client';\n\n@Injectable()\nexport class UserService extends PrismaService{\n  \n  strip_password(user: User) {\n    delete user[\"password\"]\n    return user\n  }\n  \n  strip_passwords(users: User[]): User[] {\n    users.forEach(u => {\n      u = this.strip_password(u)\n    });\n    return users\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            roleData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            userData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/controller/formation.controller.ts\n            \n            controller\n            FormationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/lesson.controller.ts\n            \n            controller\n            LessonController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/module.controller.ts\n            \n            controller\n            ModuleController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/permission.controller.ts\n            \n            controller\n            PermissionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/service/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @prisma/client : ^4.15.0\n        \n            pg : ^8.11.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            roleData   (prisma/.../seed.ts)\n                        \n                        \n                            userData   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roleData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.RoleCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n\t{\n\t  name: 'Admin',\n\t},\n\t{\n\t  name: 'Apprenant',\n\t}\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Prisma.UserCreateInput[]\n\n                    \n                \n                \n                    \n                        Default value : [\n\t{\n\t  name: 'Alice',\n\t  password: '123',\n\t  // role: '1'\n\t},\n\t{\n\t  name: 'Bob',\n\t  password: '123',\n\t  // role: '2'\n\t}\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
