var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.329,1,1.744]],["body/controllers/AppController.html",[0,0.556,1,2.946,2,1.212,3,0.641,4,0.641,5,0.549,6,3.317,7,0.463,8,0.887,9,4.423,10,1.522,11,0.045,12,0.739,13,4.066,14,0.739,15,1.013,16,0.769,17,0.549,18,2.463,19,3.317,20,0.641,21,0.382,22,1.359,23,1.706,24,0.957,25,4.066,26,0.037,27,0.037]],["title/modules/AppModule.html",[28,1.361,29,1.744]],["body/modules/AppModule.html",[1,2.681,2,1.166,3,0.454,4,0.454,5,0.389,11,0.045,16,0.902,17,0.389,18,2.422,19,2.347,20,0.454,21,0.27,26,0.03,27,0.03,28,2.092,29,3.427,30,1.529,31,1.529,32,2.347,33,2.347,34,1.737,35,3.623,36,3.623,37,2.347,38,2.347,39,2.347,40,2.628,41,1.364,42,2.276,43,3.189,44,2.347,45,1.998,46,2.877,47,2.681,48,2.681,49,2.681,50,2.681,51,2.36,52,2.681,53,2.681,54,2.877,55,1.207,56,2.877,57,2.877,58,2.877,59,2.877,60,2.877,61,2.877,62,2.877,63,2.877,64,2.877,65,2.347,66,2.877,67,1.737,68,2.877,69,3.909,70,1.737,71,2.36,72,2.877,73,2.877,74,2.877,75,2.877,76,1.077,77,1.998,78,2.347,79,2.877,80,2.877,81,2.877,82,2.877,83,2.877]],["title/injectables/AppService.html",[18,1.361,84,0.861]],["body/injectables/AppService.html",[3,0.653,4,0.653,5,0.559,7,0.472,8,0.896,9,4.449,11,0.044,12,0.752,14,0.752,15,1.024,16,0.653,17,0.559,18,2.324,20,0.653,21,0.389,24,0.974,26,0.037,27,0.037,84,1.471,85,2.2,86,3.377,87,4.14,88,4.14,89,2.875,90,3.377,91,3.377,92,4.14,93,3.377]],["title/controllers/AuthController.html",[0,0.329,53,1.744]],["body/controllers/AuthController.html",[0,0.538,2,1.15,3,0.608,4,0.608,5,0.521,7,0.439,8,0.859,10,1.444,11,0.045,12,0.701,14,0.701,16,0.806,17,0.521,20,0.608,21,0.362,22,1.289,24,0.908,26,0.036,27,0.036,40,2.407,53,2.854,94,3.147,95,4.168,96,3.858,97,4.168,98,3.858,99,3.858,100,0.801,101,0.801,102,0.608,103,0.801,104,4.726,105,1.983,106,1.444,107,3.858,108,2.679,109,2.854,110,1.618,111,3.858,112,3.858,113,3.858,114,3.858,115,3.858]],["title/guards/AuthGuard.html",[71,1.744,116,2.006]],["body/guards/AuthGuard.html",[3,0.463,4,0.463,5,0.397,7,0.334,8,0.72,11,0.045,12,0.816,14,0.72,15,0.822,16,0.815,17,0.397,20,0.463,21,0.276,22,0.981,24,1.056,26,0.03,27,0.03,55,1.231,67,1.772,70,1.772,71,2.393,76,1.099,77,2.038,78,2.394,84,1.182,100,0.931,101,0.931,102,0.791,103,0.931,117,2.935,118,2.394,119,1.338,120,4.805,121,3.919,122,3.963,123,2.394,124,2.935,125,3.122,126,5.286,127,2.935,128,3.963,129,4.805,130,2.935,131,2.935,132,1.663,133,3.963,134,3.59,135,2.935,136,3.66,137,3.66,138,2.935,139,1.56,140,2.038,141,2.038,142,2.935,143,2.394,144,1.936,145,2.394,146,2.935,147,3.963,148,3.963,149,2.935,150,2.935,151,4.093,152,2.935,153,2.106,154,1.052,155,2.394,156,2.393,157,1.099,158,2.935,159,2.935,160,2.394,161,2.935,162,2.935,163,2.935,164,2.935,165,2.394]],["title/injectables/AuthService.html",[40,1.361,84,0.861]],["body/injectables/AuthService.html",[3,0.53,4,0.53,5,0.454,7,0.383,8,0.787,11,0.045,12,0.787,14,0.61,15,1.051,16,0.756,17,0.454,20,0.53,21,0.315,24,0.79,26,0.033,27,0.033,40,2.041,42,2.125,55,1.409,84,1.292,85,1.785,95,3.534,100,0.899,101,1.051,102,0.683,103,0.899,119,1.43,121,3.534,123,3.534,125,3.298,137,4.133,144,1.795,153,2.548,154,1.272,156,2.028,157,1.622,166,2.332,167,3.359,168,3.359,169,4.332,170,3.359,171,3.518,172,3.359,173,3.359,174,3.359,175,1.582,176,2.332,177,3.359,178,3.359,179,1.785,180,3.359,181,3.359,182,2.74,183,3.359,184,3.359,185,3.359,186,1.257,187,3.359,188,2.74,189,1.001,190,3.359,191,3.359,192,3.359]],["title/controllers/LessonController.html",[0,0.329,49,1.744]],["body/controllers/LessonController.html",[0,0.252,2,0.659,3,0.349,4,0.349,5,0.299,7,0.252,8,0.59,10,1.766,11,0.045,12,0.857,14,0.857,15,1.14,16,0.769,17,0.299,20,0.349,21,0.207,22,0.739,23,0.927,24,1.061,26,0.025,27,0.025,41,1.02,49,1.959,55,0.927,76,1.215,100,0.936,101,1.091,102,0.805,103,0.936,105,1.613,106,0.827,110,0.927,119,1.657,125,2.724,132,2.232,134,3.651,139,1.174,144,1.766,154,0.861,156,1.959,157,0.827,186,1.969,189,1.406,193,1.803,194,1.041,195,2.253,196,3.844,197,4.236,198,3.245,199,3.844,200,3.844,201,3.844,202,2.21,203,2.21,204,2.21,205,2.21,206,2.21,207,2.21,208,2.21,209,2.21,210,2.21,211,4.716,212,1.996,213,2.21,214,2.21,215,2.21,216,2.21,217,2.21,218,2.21,219,2.21,220,2.21,221,1.041,222,0.927,223,0.827,224,3.136,225,1.041,226,2.21,227,0.659,228,0.827,229,1.041,230,2.21,231,2.21,232,1.174,233,2.21,234,1.529,235,2.647,236,1.959,237,2.21,238,1.174,239,2.21,240,2.21,241,1.535,242,2.21,243,2.21,244,3.456,245,2.647,246,2.647,247,2.647,248,2.21,249,1.439,250,3.245,251,2.21,252,2.21,253,2.647,254,2.21,255,2.21,256,2.647,257,2.21,258,1.803,259,2.21,260,2.321,261,2.21,262,1.174,263,2.21,264,2.21,265,2.21,266,1.535,267,1.041,268,2.21]],["title/controllers/ModuleController.html",[0,0.329,48,1.744]],["body/controllers/ModuleController.html",[0,0.287,2,0.751,3,0.397,4,0.397,5,0.341,7,0.287,8,0.648,10,1.778,11,0.045,12,0.863,14,0.863,15,1.093,16,0.749,17,0.341,20,0.397,21,0.237,22,0.842,23,1.057,24,0.974,26,0.027,27,0.027,28,2.238,41,1.098,48,2.153,76,1.335,100,0.934,101,1.093,102,0.817,103,0.934,105,1.736,106,0.943,110,1.057,119,1.651,132,2.21,144,0.943,153,1.339,154,0.669,157,0.943,186,1.685,189,1.416,194,1.187,195,3.125,212,2.121,221,1.187,222,1.057,223,1.335,225,1.187,227,0.751,228,0.943,229,1.187,232,1.339,234,2.121,236,2.153,238,1.339,241,1.75,249,0.943,262,1.339,267,1.68,269,2.055,270,4.501,271,4.139,272,4.139,273,3.566,274,4.139,275,2.52,276,2.52,277,2.52,278,2.52,279,2.52,280,2.52,281,2.52,282,2.52,283,4.75,284,2.52,285,2.52,286,2.52,287,2.52,288,2.52,289,2.52,290,2.909,291,2.52,292,2.52,293,2.52,294,2.52,295,2.52,296,2.52,297,2.52,298,2.52,299,1.521,300,3.377,301,1.95,302,2.2,303,2.52,304,2.52,305,2.476,306,2.476,307,2.476,308,2.52,309,1.521,310,2.52,311,1.521,312,2.055,313,2.055,314,2.52]],["title/controllers/PermissionController.html",[0,0.329,51,1.535]],["body/controllers/PermissionController.html",[0,0.286,2,0.748,3,0.395,4,0.395,5,0.339,7,0.286,8,0.646,10,1.775,11,0.045,12,0.895,14,0.895,15,1.092,16,0.748,17,0.339,20,0.395,21,0.235,22,0.838,23,1.052,24,1.159,26,0.027,27,0.027,41,1.095,51,1.889,76,0.939,100,0.932,101,1.074,102,0.816,103,0.932,105,1.732,106,0.939,110,1.052,119,1.685,132,2.286,186,1.843,189,1.51,194,1.181,212,2.116,221,1.181,222,1.052,223,1.331,225,1.181,227,0.748,228,0.939,229,1.181,232,1.333,234,1.674,236,1.514,238,1.333,249,1.331,260,2.146,262,1.333,266,1.741,267,1.674,299,1.514,302,1.333,311,2.146,315,2.046,316,3.292,317,4.491,318,3.664,319,3.554,320,4.128,321,4.128,322,4.128,323,2.508,324,2.508,325,2.508,326,2.508,327,2.508,328,2.508,329,2.508,330,2.508,331,2.508,332,4.741,333,2.508,334,2.508,335,2.508,336,2.508,337,2.508,338,2.508,339,2.508,340,2.508,341,2.508,342,3.554,343,1.741,344,2.508,345,2.508,346,2.508,347,2.508,348,2.867,349,2.508,350,3.554,351,3.554,352,3.554,353,2.508,354,2.508,355,2.508,356,2.046,357,2.508]],["title/classes/PrismaClientExceptionFilter.html",[21,0.271,358,2.006]],["body/classes/PrismaClientExceptionFilter.html",[3,0.452,4,0.295,5,0.253,7,0.326,8,0.521,11,0.045,12,0.34,14,0.34,15,0.389,16,0.615,17,0.253,20,0.295,21,0.176,26,0.022,27,0.022,45,1.99,70,1.131,89,1.301,97,2.338,100,0.389,101,0.389,102,0.663,103,0.389,108,1.301,139,0.995,144,1.303,154,0.497,155,1.528,160,2.84,182,1.528,227,0.558,249,1.073,301,0.882,358,1.99,359,1.873,360,2.338,361,3.181,362,2.338,363,1.528,364,1.99,365,3.481,366,2.866,367,3.481,368,3.481,369,3.9,370,1.873,371,1.873,372,1.873,373,1.528,374,1.73,375,2.338,376,1.873,377,1.873,378,1.873,379,1.873,380,2.866,381,1.528,382,5.758,383,1.873,384,5.709,385,1.873,386,2.866,387,3.428,388,3.9,389,1.873,390,1.873,391,1.873,392,5.709,393,1.873,394,1.873,395,1.873,396,1.873,397,1.873,398,3.481,399,1.873,400,1.873,401,3.481,402,4.758,403,1.873,404,1.873,405,1.873,406,1.873,407,1.873,408,3.9,409,3.9,410,1.873,411,3.616,412,2.866,413,1.873,414,2.866,415,1.873,416,1.873,417,1.873,418,1.873,419,1.873,420,1.873,421,1.873,422,1.873,423,3.9,424,1.873,425,1.873,426,4.613,427,1.873,428,2.866,429,1.873,430,1.873,431,1.873,432,1.873,433,1.873,434,1.528,435,1.873,436,2.866,437,1.873,438,1.873,439,1.873,440,1.873,441,2.866,442,3.428,443,1.873,444,1.873,445,1.873,446,1.873,447,1.873,448,1.873,449,1.528,450,2.866,451,1.873,452,1.873,453,2.866,454,2.866,455,2.866,456,1.873,457,1.873,458,2.866,459,1.873,460,1.873,461,2.84,462,4.203,463,1.873,464,1.873,465,1.873,466,3.481,467,1.873,468,1.873,469,2.866,470,1.873,471,1.873,472,1.873,473,1.873,474,1.873,475,1.873,476,1.528,477,1.873,478,3.9,479,1.873,480,1.873,481,1.873,482,1.873,483,1.873,484,1.873,485,1.873,486,3.9,487,3.481,488,2.866,489,1.873,490,1.873,491,1.873,492,1.873,493,1.873,494,1.873,495,1.873,496,1.873,497,1.873,498,1.873,499,1.873,500,1.873,501,1.873,502,1.528,503,1.873,504,2.866,505,1.873,506,1.873,507,1.873,508,1.873,509,1.873,510,1.873,511,1.873,512,1.873,513,1.873,514,3.481,515,1.873,516,1.873,517,1.873,518,1.873,519,1.873,520,1.873,521,1.873,522,1.873,523,1.873,524,1.873,525,1.873,526,1.873,527,1.873,528,1.528,529,1.873,530,1.873,531,1.528,532,2.866,533,2.866,534,1.873,535,1.873,536,1.873,537,1.873,538,1.873,539,1.873,540,1.873,541,1.873,542,1.873,543,1.873,544,1.873,545,1.873,546,1.873,547,1.873,548,1.873,549,1.873,550,1.873,551,1.873,552,1.873,553,1.873,554,1.873,555,1.873,556,1.873,557,1.528,558,1.873,559,1.873,560,1.873,561,1.873]],["title/injectables/PrismaService.html",[41,0.766,84,0.861]],["body/injectables/PrismaService.html",[3,0.592,4,0.592,5,0.508,7,0.428,8,0.845,11,0.045,12,0.845,14,0.845,16,0.733,17,0.508,20,0.592,21,0.353,26,0.035,27,0.035,41,1.234,84,1.386,85,1.996,100,0.78,101,0.78,102,0.592,103,0.78,119,1.67,143,3.065,157,1.741,227,1.12,364,3.229,562,3.065,563,4.12,564,3.793,565,4.507,566,3.793,567,4.305,568,3.757,569,2.609,570,3.757,571,3.757,572,3.757,573,3.757]],["title/controllers/RoleController.html",[0,0.329,52,1.744]],["body/controllers/RoleController.html",[0,0.271,2,0.709,3,0.375,4,0.375,5,0.322,7,0.271,8,0.622,10,1.74,11,0.045,12,0.879,14,0.879,15,1.059,16,0.763,17,0.322,20,0.375,21,0.223,22,0.795,23,0.998,24,1.032,26,0.026,27,0.026,41,1.164,51,1.819,52,2.067,76,1.501,100,0.91,101,1.035,102,0.805,103,0.91,105,1.682,106,0.891,110,0.998,119,1.657,132,2.213,144,1.642,153,1.264,154,0.631,157,0.891,186,1.501,189,1.573,194,1.121,212,2.066,221,1.121,222,0.998,223,1.282,225,1.121,227,0.709,228,1.282,229,1.121,232,1.264,234,2.066,238,1.264,241,1.652,249,0.891,262,1.264,267,1.121,299,1.437,301,1.889,302,2.131,305,2.377,306,2.377,307,2.377,309,1.437,311,2.067,316,2.377,318,3.578,574,1.652,575,4.01,576,3.424,577,4.01,578,3.424,579,4.01,580,2.38,581,2.38,582,2.38,583,2.38,584,2.38,585,2.38,586,2.38,587,2.38,588,2.38,589,4.647,590,2.38,591,2.38,592,2.38,593,2.38,594,2.38,595,2.38,596,2.38,597,2.38,598,1.652,599,1.941,600,2.38,601,2.38,602,2.38,603,3.947,604,2.38,605,2.38,606,2.38,607,2.38,608,2.38,609,2.38,610,2.38,611,2.38,612,1.941,613,1.941,614,2.38,615,2.38,616,1.941,617,2.38,618,2.38,619,2.38,620,2.38,621,2.38,622,2.38,623,3.424,624,2.38]],["title/controllers/TrainingController.html",[0,0.329,50,1.744]],["body/controllers/TrainingController.html",[0,0.247,2,0.646,3,0.342,4,0.342,5,0.293,7,0.247,8,0.581,10,1.814,11,0.045,12,0.88,14,0.88,15,1.1,16,0.764,17,0.293,20,0.342,21,0.204,22,0.725,23,0.909,24,0.987,26,0.024,27,0.024,28,1.507,30,2.378,41,1.009,50,1.931,55,0.909,76,1.198,100,0.972,101,1.087,102,0.814,103,0.972,105,1.595,106,0.812,110,0.909,119,1.667,125,2.295,132,2.246,134,2.914,139,1.152,144,1.571,154,0.575,156,1.309,157,1.198,179,1.152,186,1.862,189,0.646,194,1.021,212,1.977,221,1.021,222,0.909,223,1.198,224,1.768,225,1.021,227,0.646,228,0.812,229,1.021,232,1.152,234,2.207,236,2.295,238,1.152,245,1.768,246,1.768,247,1.768,249,1.198,253,1.768,258,1.768,260,2.295,262,1.152,266,1.505,267,1.507,299,1.309,301,1.977,302,2.02,305,2.221,306,2.221,307,2.221,309,1.309,311,2.534,625,1.768,626,3.651,627,4.197,628,3.199,629,3.199,630,3.801,631,3.801,632,3.199,633,3.801,634,2.168,635,2.168,636,2.168,637,2.168,638,2.168,639,2.168,640,2.168,641,2.168,642,2.168,643,2.168,644,2.168,645,4.476,646,2.168,647,2.168,648,2.168,649,2.168,650,2.168,651,2.168,652,2.168,653,2.168,654,2.168,655,2.168,656,2.168,657,2.168,658,2.168,659,2.168,660,2.168,661,3.199,662,2.168,663,2.168,664,2.168,665,1.505,666,2.168,667,2.168,668,2.609,669,2.168,670,2.168,671,2.168,672,2.168,673,2.168,674,2.168,675,2.168,676,2.168,677,1.768,678,1.768,679,2.168]],["title/controllers/UserController.html",[0,0.329,47,1.744]],["body/controllers/UserController.html",[0,0.271,2,0.711,3,0.376,4,0.376,5,0.322,7,0.271,8,0.623,10,1.741,11,0.045,12,0.845,14,0.845,15,1.109,16,0.733,17,0.322,20,0.376,21,0.224,22,0.797,23,1,24,1.094,26,0.026,27,0.026,42,1.684,47,2.069,65,1.944,100,0.911,101,1.005,102,0.805,103,0.911,105,1.684,106,0.892,108,1.655,109,2.069,110,1,119,1.647,132,2.214,136,3.58,144,1.812,153,1.266,154,0.632,157,1.741,171,2.787,175,1.123,176,1.655,179,1.821,186,1.946,189,1.386,194,1.123,212,2.068,221,1.123,222,1,223,0.892,227,0.711,228,0.892,229,1.123,249,1.283,256,1.944,260,2.069,267,1.123,290,1.944,301,1.615,309,1.439,373,1.944,381,1.944,680,1.655,681,4.013,682,4.389,683,3.427,684,4.013,685,4.013,686,2.383,687,2.383,688,2.383,689,2.383,690,2.383,691,2.383,692,2.383,693,2.383,694,2.383,695,2.383,696,2.383,697,4.389,698,2.383,699,2.383,700,2.383,701,2.383,702,2.383,703,2.383,704,2.383,705,2.383,706,2.383,707,2.383,708,2.383,709,2.383,710,2.383,711,2.383,712,2.383,713,3.793,714,2.383,715,4.013,716,2.383,717,2.383,718,3.58,719,2.383,720,3.427,721,2.383,722,2.383,723,2.383,724,2.383,725,2.383,726,3.427,727,2.383,728,2.383,729,2.383,730,2.383,731,2.383,732,2.383]],["title/injectables/UserService.html",[42,1.212,84,0.861]],["body/injectables/UserService.html",[3,0.538,4,0.538,5,0.461,7,0.388,8,0.795,11,0.045,12,0.926,14,0.926,16,0.762,17,0.461,20,0.538,21,0.32,24,1.029,26,0.033,27,0.033,41,1.398,42,1.835,84,1.304,85,1.812,100,1.057,101,1.002,102,0.803,103,1.002,119,1.519,179,3.056,223,1.276,225,1.606,227,1.016,364,3.037,564,3.568,565,3.94,566,2.781,567,3.568,569,2.367,665,3.037,713,2.781,733,2.781,734,4.374,735,4.374,736,4.374,737,3.409,738,4.374,739,3.409,740,4.374,741,3.409,742,3.409,743,3.409,744,3.409,745,3.409]],["title/coverage.html",[746,3.198]],["body/coverage.html",[0,0.618,1,1.844,5,0.413,6,2.491,11,0.045,18,1.439,21,0.287,26,0.031,27,0.031,34,1.844,40,1.439,41,0.81,42,1.281,47,1.844,48,1.844,49,1.844,50,1.844,51,1.623,52,1.844,53,1.844,67,1.844,71,1.844,84,1.456,86,2.491,90,2.491,94,2.491,102,0.482,109,1.844,116,2.121,118,2.491,140,2.121,141,2.121,154,0.81,166,2.826,175,2.157,189,0.911,193,2.491,228,1.143,269,2.491,315,2.491,358,2.121,360,2.491,361,3.32,362,2.491,363,2.491,374,1.844,476,2.491,562,2.491,574,2.826,598,2.121,625,2.491,680,2.826,733,2.491,746,2.491,747,3.054,748,3.054,749,3.179,750,4.07,751,2.121,752,5.882,753,5.665,754,5.593,755,4.882,756,3.054,757,2.491,758,3.983,759,2.491,760,4.578,761,4.07,762,3.054,763,2.491,764,4.07,765,3.054,766,3.054]],["title/dependencies.html",[31,1.843,767,1.976]],["body/dependencies.html",[11,0.045,17,0.573,26,0.038,27,0.038,31,2.253,55,1.779,70,2.56,139,2.253,175,1.998,227,1.264,768,5.322,769,4.24,770,4.24,771,4.24,772,4.24,773,3.459,774,4.24,775,4.24,776,4.24,777,4.24,778,4.24,779,4.24]],["title/miscellaneous/functions.html",[780,1.463,781,2.829]],["body/miscellaneous/functions.html",[7,0.506,11,0.039,26,0.039,27,0.039,34,3.275,749,3.085,751,3.767,763,3.624,780,2.682,781,3.624,782,4.442,783,3.624]],["title/index.html",[7,0.276,784,2.423,785,2.423]],["body/index.html",[11,0.033,15,0.976,26,0.012,27,0.012,28,2.189,30,1.753,31,0.467,55,0.369,89,0.61,91,2.5,93,0.717,100,1.062,101,1.115,102,0.913,103,0.923,106,1.567,151,4.197,154,0.875,165,4.153,171,2.128,175,0.414,179,2.224,186,1.906,188,1.669,189,1.418,195,3.088,222,1.711,223,1.815,234,0.964,244,4.565,249,1.845,300,2.691,302,1.628,312,0.717,313,0.717,316,2.973,343,1.067,348,3.535,356,2.5,374,0.53,375,4.175,411,1.253,434,4.175,442,4.078,449,0.717,461,3.988,528,0.717,531,1.669,569,1.067,603,2.5,612,0.717,613,0.717,626,3.79,665,0.61,668,0.717,677,0.717,678,0.717,718,1.669,751,0.61,773,0.717,786,0.879,787,5.144,788,0.879,789,0.879,790,0.879,791,0.879,792,1.536,793,0.879,794,3.299,795,0.879,796,0.879,797,2.046,798,1.536,799,1.536,800,1.536,801,0.879,802,0.879,803,0.879,804,0.879,805,2.046,806,0.879,807,2.046,808,0.879,809,2.046,810,0.879,811,0.879,812,0.879,813,0.879,814,0.879,815,0.879,816,0.879,817,0.879,818,0.879,819,0.879,820,0.879,821,0.879,822,2.046,823,0.879,824,0.879,825,0.879,826,1.536,827,0.879,828,0.879,829,0.879,830,0.879,831,5.118,832,5.118,833,4.928,834,5.73,835,3.064,836,5.566,837,5.118,838,5.558,839,0.879,840,1.536,841,4.847,842,4.889,843,4.889,844,5.091,845,0.879,846,0.879,847,3.064,848,3.064,849,0.879,850,0.879,851,0.879,852,0.879,853,0.879,854,3.064,855,4.079,856,4.079,857,0.879,858,0.879,859,0.879,860,0.879,861,0.879,862,1.536,863,0.879,864,0.879,865,0.879,866,0.879,867,2.046,868,0.879,869,0.879,870,0.879,871,0.879,872,0.879,873,3.064,874,2.046,875,0.879,876,1.536,877,0.879,878,0.879,879,0.879,880,0.879,881,0.879,882,0.879,883,0.879,884,0.879,885,1.536,886,0.879,887,0.879,888,0.879,889,0.879,890,0.879,891,0.879,892,0.879,893,0.879,894,0.879,895,1.536,896,0.879,897,0.879,898,0.879,899,0.879,900,0.879,901,0.879,902,0.879,903,0.879,904,0.879,905,1.536,906,0.879,907,0.879,908,0.879,909,0.879,910,0.879,911,0.879,912,0.879,913,0.879]],["title/modules.html",[30,2.083]],["body/modules.html",[11,0.039,26,0.039,27,0.039,29,2.736,30,2.408,502,3.696,914,4.531,915,4.531,916,4.531]],["title/overview.html",[917,3.198]],["body/overview.html",[2,1.167,11,0.043,18,2.423,21,0.368,26,0.036,27,0.036,28,2.247,29,3.531,31,2.08,32,3.194,33,3.194,34,2.364,35,3.194,36,3.194,37,3.194,38,3.194,39,3.194,40,2.662,41,1.365,42,2.246,43,3.89,44,3.194,45,2.719,85,2.08,116,2.719,917,3.194,918,5.143,919,3.915,920,3.915]],["title/properties.html",[767,1.976,921,2.829]],["body/properties.html",[11,0.044,26,0.039,27,0.039,235,3.644,348,3.102,921,3.644,922,4.467,923,4.467,924,4.467,925,4.467]],["title/miscellaneous/variables.html",[780,1.463,926,2.829]],["body/miscellaneous/variables.html",[7,0.388,11,0.045,15,0.908,26,0.033,27,0.033,67,2.641,76,1.276,77,3.037,102,0.803,109,2.641,140,3.037,141,3.037,145,2.781,154,0.905,166,2.367,175,2.54,176,3.353,189,1.304,228,1.637,301,1.606,343,3.353,374,2.641,387,4.643,557,4.643,563,2.781,574,2.367,598,3.037,599,2.781,616,3.568,680,2.367,749,2.367,757,2.781,758,2.781,759,2.781,780,2.058,783,3.568,926,2.781,927,3.409,928,3.409,929,3.409,930,5.095,931,3.409,932,3.409,933,3.409,934,3.409,935,3.409,936,3.409,937,3.409,938,3.409,939,3.409,940,3.409,941,3.409,942,3.409,943,3.409,944,3.409,945,3.409]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":923,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":918,"title":{},"body":{"overview.html":{}}}],["10.1.0",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":708,"title":{},"body":{"controllers/UserController.html":{}}}],["200",{"_index":833,"title":{},"body":{"index.html":{}}}],["201",{"_index":854,"title":{},"body":{"index.html":{}}}],["3600s",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["4",{"_index":920,"title":{},"body":{"overview.html":{}}}],["4.15.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":842,"title":{},"body":{"index.html":{}}}],["64",{"_index":539,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["7.2.0",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":919,"title":{},"body":{"overview.html":{}}}],["8.11.0",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":873,"title":{},"body":{"index.html":{}}}],["adding",{"_index":521,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["addlessons",{"_index":312,"title":{},"body":{"controllers/ModuleController.html":{},"index.html":{}}}],["addmodules",{"_index":677,"title":{},"body":{"controllers/TrainingController.html":{},"index.html":{}}}],["addpermissions",{"_index":612,"title":{},"body":{"controllers/RoleController.html":{},"index.html":{}}}],["allusers",{"_index":705,"title":{},"body":{"controllers/UserController.html":{}}}],["api",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["app",{"_index":569,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["app.close",{"_index":573,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":834,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["argon2.hash(userdata.password",{"_index":727,"title":{},"body":{"controllers/UserController.html":{}}}],["argon2.verify(user.password",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["argument",{"_index":445,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["argumentshost",{"_index":369,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["array",{"_index":867,"title":{},"body":{"index.html":{}}}],["assigned",{"_index":869,"title":{},"body":{"index.html":{}}}],["associated",{"_index":874,"title":{},"body":{"index.html":{}}}],["async",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":805,"title":{},"body":{"index.html":{}}}],["auth/auth.guard",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/constant",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":53,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authentication",{"_index":813,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":71,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["author",{"_index":235,"title":{},"body":{"controllers/LessonController.html":{},"properties.html":{}}}],["authorid",{"_index":252,"title":{},"body":{"controllers/LessonController.html":{}}}],["authorization",{"_index":844,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":40,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["await",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["back",{"_index":830,"title":{},"body":{"index.html":{}}}],["baseexceptionfilter",{"_index":365,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["bearer",{"_index":165,"title":{},"body":{"guards/AuthGuard.html":{},"index.html":{}}}],["between",{"_index":455,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["bigint",{"_index":545,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["bit",{"_index":540,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["body",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":392,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["browse",{"_index":916,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":914,"title":{},"body":{"modules.html":{}}}],["c'est",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["case",{"_index":384,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catch",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["catch(exception",{"_index":366,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["catch(prisma.prismaclientknownrequesterror",{"_index":376,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["center",{"_index":789,"title":{},"body":{"index.html":{}}}],["change",{"_index":449,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["check",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["class",{"_index":21,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":359,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["client",{"_index":361,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["coach",{"_index":792,"title":{},"body":{"index.html":{}}}],["coachid",{"_index":668,"title":{},"body":{"controllers/TrainingController.html":{},"index.html":{}}}],["code",{"_index":434,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["code\":\"404\",\"message\":\"not",{"_index":843,"title":{},"body":{"index.html":{}}}],["column",{"_index":388,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["column's",{"_index":390,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["conditions",{"_index":395,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["conflict",{"_index":553,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["connected",{"_index":469,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["connection",{"_index":486,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["consider",{"_index":543,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["const",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["constaint",{"_index":407,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["constant",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constraint",{"_index":401,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["constructor",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["constructor(jwtservice",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["constructor(usersservice",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["contain",{"_index":800,"title":{},"body":{"index.html":{}}}],["content",{"_index":244,"title":{},"body":{"controllers/LessonController.html":{},"index.html":{}}}],["context",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.getclass",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller(\"lesson",{"_index":230,"title":{},"body":{"controllers/LessonController.html":{}}}],["controller(\"module",{"_index":292,"title":{},"body":{"controllers/ModuleController.html":{}}}],["controller(\"permission",{"_index":340,"title":{},"body":{"controllers/PermissionController.html":{}}}],["controller(\"role",{"_index":600,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller(\"training",{"_index":656,"title":{},"body":{"controllers/TrainingController.html":{}}}],["controller('user",{"_index":702,"title":{},"body":{"controllers/UserController.html":{}}}],["controller/auth.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/lesson.controller",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/module.controller",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/permission.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/role.controller",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/training.controller",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["controller/user.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["copy",{"_index":817,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":746,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":302,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"index.html":{}}}],["create/signup",{"_index":851,"title":{},"body":{"index.html":{}}}],["createfichierpermission",{"_index":575,"title":{},"body":{"controllers/RoleController.html":{}}}],["ctx",{"_index":377,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":379,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["curl",{"_index":836,"title":{},"body":{"index.html":{}}}],["current",{"_index":478,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["d",{"_index":855,"title":{},"body":{"index.html":{}}}],["data",{"_index":249,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["data.json",{"_index":856,"title":{},"body":{"index.html":{}}}],["database",{"_index":411,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["db",{"_index":820,"title":{},"body":{"index.html":{}}}],["de",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deadlock",{"_index":554,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorator",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":557,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":223,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["delete(\":id/delete",{"_index":266,"title":{},"body":{"controllers/LessonController.html":{},"controllers/PermissionController.html":{},"controllers/TrainingController.html":{}}}],["delete(':id/delete",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["deletelesson",{"_index":196,"title":{},"body":{"controllers/LessonController.html":{}}}],["deletelesson(id",{"_index":202,"title":{},"body":{"controllers/LessonController.html":{}}}],["deletelessons",{"_index":313,"title":{},"body":{"controllers/ModuleController.html":{},"index.html":{}}}],["deletemodules",{"_index":678,"title":{},"body":{"controllers/TrainingController.html":{},"index.html":{}}}],["deletepermissions",{"_index":613,"title":{},"body":{"controllers/RoleController.html":{},"index.html":{}}}],["deleteuser",{"_index":681,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":686,"title":{},"body":{"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["depends",{"_index":496,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["description",{"_index":348,"title":{},"body":{"controllers/PermissionController.html":{},"index.html":{},"properties.html":{}}}],["description?:string",{"_index":355,"title":{},"body":{"controllers/PermissionController.html":{}}}],["details",{"_index":535,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["development",{"_index":825,"title":{},"body":{"index.html":{}}}],["difficile",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["doesn't",{"_index":501,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["don't",{"_index":558,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["due",{"_index":551,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["during",{"_index":510,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["e",{"_index":623,"title":{},"body":{"controllers/RoleController.html":{}}}],["each",{"_index":793,"title":{},"body":{"index.html":{}}}],["empty",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["enableshutdownhooks",{"_index":564,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["enableshutdownhooks(app",{"_index":566,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":808,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["env",{"_index":819,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":818,"title":{},"body":{"index.html":{}}}],["error",{"_index":423,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["errors",{"_index":508,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["et",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ex",{"_index":797,"title":{},"body":{"index.html":{}}}],["example",{"_index":787,"title":{},"body":{"index.html":{}}}],["exception",{"_index":371,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":363,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:8",{"_index":370,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.argument_name",{"_index":446,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.argument_value",{"_index":397,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.cause",{"_index":498,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.child_name",{"_index":468,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.code",{"_index":435,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.column",{"_index":480,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.column_name",{"_index":391,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.connection_limit",{"_index":493,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.constraint",{"_index":439,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.database_error",{"_index":412,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.details",{"_index":462,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.error",{"_index":515,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.errors",{"_index":512,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.feature",{"_index":505,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.field_name",{"_index":409,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.field_value",{"_index":414,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.message",{"_index":436,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.model_a_name",{"_index":456,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.model_b_name",{"_index":457,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.model_name",{"_index":419,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.model_name}.${exception.meta.argument_name",{"_index":396,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.object_name",{"_index":447,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.parent_name",{"_index":467,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.path",{"_index":443,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.query_parsing_error",{"_index":427,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.query_position",{"_index":428,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.query_validation_error",{"_index":431,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.relation_name",{"_index":454,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.table",{"_index":477,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.target",{"_index":403,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception.meta.timeout",{"_index":491,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["exception/prisma",{"_index":362,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["execution",{"_index":511,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["executioncontext",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exist",{"_index":398,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["expiresin",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/LessonController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/TrainingController.html":{},"dependencies.html":{}}}],["extends",{"_index":364,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["extracttokenfromheader",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{}}}],["failed",{"_index":402,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["feature",{"_index":503,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["fetching",{"_index":485,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["field",{"_index":408,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["field's",{"_index":417,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":517,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["fit",{"_index":538,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["flow",{"_index":803,"title":{},"body":{"index.html":{}}}],["for(let",{"_index":306,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["foreign",{"_index":405,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["found",{"_index":461,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["framework",{"_index":811,"title":{},"body":{"index.html":{}}}],["fs",{"_index":598,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fs.writefile(\"src/auth/permissionrole.ts\",`export",{"_index":621,"title":{},"body":{"controllers/RoleController.html":{}}}],["fulltext",{"_index":518,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["fulltext([fields",{"_index":522,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["function",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":781,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(\":id",{"_index":238,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["get(\":id/students",{"_index":663,"title":{},"body":{"controllers/TrainingController.html":{}}}],["get(\"list",{"_index":232,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["get(':id",{"_index":711,"title":{},"body":{"controllers/UserController.html":{}}}],["get('list",{"_index":704,"title":{},"body":{"controllers/UserController.html":{}}}],["getalllessons",{"_index":197,"title":{},"body":{"controllers/LessonController.html":{}}}],["getallmodules",{"_index":270,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getallpermissionwithrole",{"_index":317,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getallrole",{"_index":318,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["getalltraining",{"_index":627,"title":{},"body":{"controllers/TrainingController.html":{}}}],["getallusers",{"_index":682,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlessonbyid",{"_index":198,"title":{},"body":{"controllers/LessonController.html":{}}}],["getlessonbyid(@param('id",{"_index":239,"title":{},"body":{"controllers/LessonController.html":{}}}],["getlessonbyid(id",{"_index":207,"title":{},"body":{"controllers/LessonController.html":{}}}],["getlistpermission\":[1],\"getpermission\":[1],\"createpermission\":[1],\"deletepermission\":[1],\"updatepermission\":[1],\"getlistrole\":[1],\"getrole\":[1],\"createrole\":[1],\"deleterole\":[1],\"updaterole\":[1],\"getlistuser\":[1,2],\"getuser\":[1,2],\"setroleuser\":[1],\"deleteuser\":[1],\"getlistlesson\":[1,2],\"getlesson\":[1,2],\"createlesson\":[1],\"updatelesson\":[1],\"deletelesson\":[1],\"getlistmodule\":[1,2],\"getmodule\":[1,2],\"createmodule\":[1],\"deletemodule\":[1],\"updatemodule\":[1],\"getlisttraining\":[1,2],\"gettraining\":[1,2],\"createtraining\":[1],\"deletetraining\":[1],\"updatetraining\":[1],\"subscribe\":[1,2],\"lessonvalidation\":[1,2],\"gettrainingstudents\":[1,2",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getmodulebyid",{"_index":271,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getmodulebyid(id",{"_index":277,"title":{},"body":{"controllers/ModuleController.html":{}}}],["getpermissionbyid",{"_index":319,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getpermissionbyid(@param(\"id",{"_index":345,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getpermissionbyid(id",{"_index":326,"title":{},"body":{"controllers/PermissionController.html":{}}}],["getrolebyid",{"_index":576,"title":{},"body":{"controllers/RoleController.html":{}}}],["getrolebyid(@param(\"id",{"_index":605,"title":{},"body":{"controllers/RoleController.html":{}}}],["getrolebyid(id",{"_index":583,"title":{},"body":{"controllers/RoleController.html":{}}}],["getting",{"_index":784,"title":{"index.html":{}},"body":{}}],["gettrainingbyid",{"_index":628,"title":{},"body":{"controllers/TrainingController.html":{}}}],["gettrainingbyid(@param(\"id",{"_index":660,"title":{},"body":{"controllers/TrainingController.html":{}}}],["gettrainingbyid(id",{"_index":636,"title":{},"body":{"controllers/TrainingController.html":{}}}],["gettrainingstudent",{"_index":629,"title":{},"body":{"controllers/TrainingController.html":{}}}],["gettrainingstudent(@param(\"id",{"_index":664,"title":{},"body":{"controllers/TrainingController.html":{}}}],["gettrainingstudent(id",{"_index":639,"title":{},"body":{"controllers/TrainingController.html":{}}}],["getuserbyid",{"_index":683,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(@param('id",{"_index":712,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":691,"title":{},"body":{"controllers/UserController.html":{}}}],["global",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["guard",{"_index":116,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":838,"title":{},"body":{"index.html":{}}}],["hash",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["hashed",{"_index":853,"title":{},"body":{"index.html":{}}}],["hashing",{"_index":814,"title":{},"body":{"index.html":{}}}],["host",{"_index":368,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":378,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["host/user/password",{"_index":821,"title":{},"body":{"index.html":{}}}],["http",{"_index":832,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/lesson/1",{"_index":886,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/lesson/1/delete",{"_index":891,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/lesson/1/update",{"_index":894,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/lesson/create",{"_index":890,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/lesson/list",{"_index":888,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/login",{"_index":839,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/module/1",{"_index":877,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/module/1/delete",{"_index":882,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/module/1/update",{"_index":884,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/module/create",{"_index":881,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/module/list",{"_index":879,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/permission/1",{"_index":906,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/permission/1/delete",{"_index":911,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/permission/1/update",{"_index":913,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/permission/create",{"_index":910,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/permission/list",{"_index":908,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/role/1",{"_index":896,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/role/1/delete",{"_index":901,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/role/1/update",{"_index":904,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/role/create",{"_index":900,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/role/list",{"_index":898,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/training/1",{"_index":863,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/training/1/delete",{"_index":871,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/training/1/update",{"_index":875,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/training/create",{"_index":870,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/training/list",{"_index":865,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/1",{"_index":845,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/1/delete",{"_index":858,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/1/setrole",{"_index":861,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/list",{"_index":849,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/signup",{"_index":857,"title":{},"body":{"index.html":{}}}],["http://pris.ly/d/connection",{"_index":489,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpcode",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@public()@post('login",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":373,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"controllers/UserController.html":{}}}],["httpexception(\"name",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["https://pris.ly/d/mongodb",{"_index":536,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["httpstatus",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":381,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"controllers/UserController.html":{}}}],["i=0;i",{"_index":307,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["id",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["id:number(id",{"_index":309,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["id:string",{"_index":311,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["identifier",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":868,"title":{},"body":{"index.html":{}}}],["if(!password",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(await",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(e",{"_index":624,"title":{},"body":{"controllers/RoleController.html":{}}}],["if(ispublic",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["if(number.isnan(number(id",{"_index":296,"title":{},"body":{"controllers/ModuleController.html":{}}}],["if(user",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(userdata.name",{"_index":722,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["include",{"_index":234,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"index.html":{}}}],["inconsistent",{"_index":482,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":567,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":740,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":84,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["input",{"_index":472,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["install",{"_index":823,"title":{},"body":{"index.html":{}}}],["installation",{"_index":816,"title":{},"body":{"index.html":{}}}],["int",{"_index":841,"title":{},"body":{"index.html":{}}}],["integer",{"_index":542,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["integers",{"_index":549,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["integration",{"_index":815,"title":{},"body":{"index.html":{}}}],["interpretation",{"_index":464,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["introduction",{"_index":801,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":416,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["is_public_key",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispublic",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["item[\"roles\"].foreach((role:object",{"_index":619,"title":{},"body":{"controllers/RoleController.html":{}}}],["json.stringify(permissions",{"_index":622,"title":{},"body":{"controllers/RoleController.html":{}}}],["jwt",{"_index":245,"title":{},"body":{"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["jwtconstants",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{}}}],["jwtmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtservice",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["jwtservice.decode(jwt",{"_index":247,"title":{},"body":{"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["key",{"_index":406,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["know",{"_index":559,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["large",{"_index":548,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["lesson",{"_index":195,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"index.html":{}}}],["lesson/create",{"_index":889,"title":{},"body":{"index.html":{}}}],["lesson/list",{"_index":887,"title":{},"body":{"index.html":{}}}],["lesson/{id",{"_index":885,"title":{},"body":{"index.html":{}}}],["lesson/{id}/update",{"_index":892,"title":{},"body":{"index.html":{}}}],["lessoncontroller",{"_index":49,"title":{"controllers/LessonController.html":{}},"body":{"modules/AppModule.html":{},"controllers/LessonController.html":{},"coverage.html":{}}}],["lessoncreate",{"_index":199,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessoncreate(request",{"_index":210,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata",{"_index":211,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata.content",{"_index":264,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata.name",{"_index":250,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessondata?.content",{"_index":251,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessonid",{"_index":259,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessonmodel",{"_index":226,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessons",{"_index":300,"title":{},"body":{"controllers/ModuleController.html":{},"index.html":{}}}],["lessonvalidation",{"_index":200,"title":{},"body":{"controllers/LessonController.html":{}}}],["lessonvalidation(request",{"_index":215,"title":{},"body":{"controllers/LessonController.html":{}}}],["license",{"_index":924,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":492,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["limit=1000",{"_index":847,"title":{},"body":{"index.html":{}}}],["list",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["literal",{"_index":212,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["login",{"_index":807,"title":{},"body":{"index.html":{}}}],["long",{"_index":389,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["loops",{"_index":802,"title":{},"body":{"index.html":{}}}],["main",{"_index":751,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["make",{"_index":451,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["manage",{"_index":788,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["members",{"_index":790,"title":{},"body":{"index.html":{}}}],["message",{"_index":382,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["metadata",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":780,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":441,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["mode",{"_index":826,"title":{},"body":{"index.html":{}}}],["models",{"_index":458,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/ModuleController.html":{},"controllers/TrainingController.html":{},"index.html":{},"overview.html":{}}}],["module/create",{"_index":880,"title":{},"body":{"index.html":{}}}],["module/list",{"_index":878,"title":{},"body":{"index.html":{}}}],["module/{id",{"_index":876,"title":{},"body":{"index.html":{}}}],["module/{id}/update",{"_index":883,"title":{},"body":{"index.html":{}}}],["modulecontroller",{"_index":48,"title":{"controllers/ModuleController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ModuleController.html":{},"coverage.html":{}}}],["modulecreate",{"_index":272,"title":{},"body":{"controllers/ModuleController.html":{}}}],["modulecreate(moduledata",{"_index":280,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledata",{"_index":283,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledata.addlessons",{"_index":314,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledata.name",{"_index":304,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledelete",{"_index":273,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduledelete(id",{"_index":284,"title":{},"body":{"controllers/ModuleController.html":{}}}],["modulemodel",{"_index":291,"title":{},"body":{"controllers/ModuleController.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"controllers/TrainingController.html":{},"index.html":{},"modules.html":{}}}],["moduleupdate",{"_index":274,"title":{},"body":{"controllers/ModuleController.html":{}}}],["moduleupdate(id",{"_index":287,"title":{},"body":{"controllers/ModuleController.html":{}}}],["mongodb",{"_index":529,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["more",{"_index":488,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["mot",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiple",{"_index":507,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["n/a",{"_index":852,"title":{},"body":{"index.html":{}}}],["name",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["name:true",{"_index":666,"title":{},"body":{"controllers/TrainingController.html":{}}}],["name?:string",{"_index":354,"title":{},"body":{"controllers/PermissionController.html":{}}}],["needs",{"_index":525,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["nestjs",{"_index":810,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/PrismaClientExceptionFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/TrainingController.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/platform",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":848,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":290,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/UserController.html":{}}}],["npm",{"_index":822,"title":{},"body":{"index.html":{}}}],["null",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["number",{"_index":301,"title":{},"body":{"controllers/ModuleController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["number(id",{"_index":260,"title":{},"body":{"controllers/LessonController.html":{},"controllers/PermissionController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["number(trainingdata.coachid",{"_index":671,"title":{},"body":{"controllers/TrainingController.html":{}}}],["object",{"_index":616,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["occurred",{"_index":509,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["one",{"_index":497,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["onmoduleinit",{"_index":565,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["operation",{"_index":495,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["optional",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["orm",{"_index":812,"title":{},"body":{"index.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/PrismaClientExceptionFilter.html":{},"overview.html":{}}}],["overview",{"_index":917,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2000",{"_index":385,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2001",{"_index":393,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2002",{"_index":399,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2003",{"_index":404,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2004",{"_index":410,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2005",{"_index":413,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2006",{"_index":418,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2007",{"_index":421,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2008",{"_index":424,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2009",{"_index":429,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2010",{"_index":432,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2011",{"_index":437,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2012",{"_index":440,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2013",{"_index":444,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2014",{"_index":448,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2015",{"_index":459,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2016",{"_index":463,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2017",{"_index":465,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2018",{"_index":470,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2019",{"_index":471,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2020",{"_index":473,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2021",{"_index":475,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2022",{"_index":479,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2023",{"_index":481,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2024",{"_index":483,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2025",{"_index":494,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2026",{"_index":499,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2027",{"_index":506,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2028",{"_index":513,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2030",{"_index":516,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2031",{"_index":524,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2032",{"_index":537,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["p2034",{"_index":550,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["package",{"_index":767,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":221,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["param(\"id",{"_index":267,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":256,"title":{},"body":{"controllers/LessonController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["parse",{"_index":425,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["passe",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["password",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["password:string",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["payload[\"id",{"_index":253,"title":{},"body":{"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["perform",{"_index":526,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["permission",{"_index":316,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"index.html":{}}}],["permission.controller",{"_index":597,"title":{},"body":{"controllers/RoleController.html":{}}}],["permission/create",{"_index":909,"title":{},"body":{"index.html":{}}}],["permission/list",{"_index":907,"title":{},"body":{"index.html":{}}}],["permission/{id",{"_index":905,"title":{},"body":{"index.html":{}}}],["permission/{id}/update",{"_index":912,"title":{},"body":{"index.html":{}}}],["permissioncontroller",{"_index":51,"title":{"controllers/PermissionController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["permissioncontroller(new",{"_index":615,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissioncontroller.getallpermissionwithrole()).foreach(item",{"_index":617,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissioncreate",{"_index":320,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissioncreate(permissiondata",{"_index":329,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondata",{"_index":332,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondata.description",{"_index":351,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondata.name",{"_index":350,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondelete",{"_index":321,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissiondelete(id",{"_index":333,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionmodel",{"_index":339,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionrole",{"_index":228,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissionrole.createlesson",{"_index":242,"title":{},"body":{"controllers/LessonController.html":{}}}],["permissionrole.createmodule",{"_index":298,"title":{},"body":{"controllers/ModuleController.html":{}}}],["permissionrole.createpermission",{"_index":347,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionrole.createrole",{"_index":607,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionrole.deletelesson",{"_index":265,"title":{},"body":{"controllers/LessonController.html":{}}}],["permissionrole.deletepermission",{"_index":352,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionrole.deleteuser",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionrole.getlesson",{"_index":237,"title":{},"body":{"controllers/LessonController.html":{}}}],["permissionrole.getlistlesson",{"_index":231,"title":{},"body":{"controllers/LessonController.html":{}}}],["permissionrole.getlistmodule",{"_index":293,"title":{},"body":{"controllers/ModuleController.html":{}}}],["permissionrole.getlistpermission",{"_index":341,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionrole.getlistrole",{"_index":601,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionrole.getlistuser",{"_index":703,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionrole.getmodule",{"_index":295,"title":{},"body":{"controllers/ModuleController.html":{}}}],["permissionrole.getpermission",{"_index":344,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionrole.getrole",{"_index":604,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionrole.getuser",{"_index":710,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionrole.setroleuser",{"_index":716,"title":{},"body":{"controllers/UserController.html":{}}}],["permissionrole.updatelesson",{"_index":261,"title":{},"body":{"controllers/LessonController.html":{}}}],["permissionrole.updatemodule",{"_index":310,"title":{},"body":{"controllers/ModuleController.html":{}}}],["permissionrole.updaterole",{"_index":611,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions",{"_index":603,"title":{},"body":{"controllers/RoleController.html":{},"index.html":{}}}],["permissions[item[\"name",{"_index":618,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions[item[\"name\"]].push(role[\"roleid",{"_index":620,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissionupdate",{"_index":322,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permissionupdate(id",{"_index":336,"title":{},"body":{"controllers/PermissionController.html":{}}}],["pg",{"_index":773,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["please",{"_index":555,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["pool",{"_index":487,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["post",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post(\":id/validation",{"_index":255,"title":{},"body":{"controllers/LessonController.html":{}}}],["post(\"create",{"_index":299,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["post('create",{"_index":243,"title":{},"body":{"controllers/LessonController.html":{}}}],["post('login",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":721,"title":{},"body":{"controllers/UserController.html":{}}}],["postgresql",{"_index":809,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":194,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":374,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":367,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["prisma.service",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/.../seed.ts",{"_index":783,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":227,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prisma/seed.ts",{"_index":749,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":563,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaclientexceptionfilter",{"_index":358,"title":{"classes/PrismaClientExceptionFilter.html":{}},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["prismaservice",{"_index":41,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["prismaservice:12",{"_index":741,"title":{},"body":{"injectables/UserService.html":{}}}],["prismaservice:8",{"_index":742,"title":{},"body":{"injectables/UserService.html":{}}}],["private",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["production",{"_index":828,"title":{},"body":{"index.html":{}}}],["promise",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["properties",{"_index":921,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["provide",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":386,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["provider",{"_index":500,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post('signup",{"_index":699,"title":{},"body":{"controllers/UserController.html":{}}}],["put",{"_index":222,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["put(\":id/update",{"_index":262,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["put(':id/setrole",{"_index":717,"title":{},"body":{"controllers/UserController.html":{}}}],["python",{"_index":798,"title":{},"body":{"index.html":{}}}],["query",{"_index":426,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["range",{"_index":474,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["raw",{"_index":433,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["record",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["records",{"_index":466,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["reflect",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["register",{"_index":796,"title":{},"body":{"index.html":{}}}],["related",{"_index":460,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["relation",{"_index":453,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["relations",{"_index":305,"title":{},"body":{"controllers/ModuleController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{}}}],["remove",{"_index":903,"title":{},"body":{"index.html":{}}}],["replica",{"_index":532,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["req",{"_index":224,"title":{},"body":{"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["request",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["request.headers.authorization.replace(\"bearer",{"_index":246,"title":{},"body":{"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["request.headers.authorization?.split",{"_index":164,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request[\"user",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{}}}],["require(\"argon2",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["require(\"fs",{"_index":599,"title":{},"body":{"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":442,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["requiredroles",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requiredroles[0].includes(request.user.role",{"_index":163,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requires",{"_index":528,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":375,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["response.status(status).json",{"_index":560,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["responses",{"_index":831,"title":{},"body":{"index.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":556,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["role(permissionrole.createlesson)@post('create",{"_index":213,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.createmodule)@post('create",{"_index":281,"title":{},"body":{"controllers/ModuleController.html":{}}}],["role(permissionrole.createpermission)@post('create",{"_index":330,"title":{},"body":{"controllers/PermissionController.html":{}}}],["role(permissionrole.createrole)@post('create",{"_index":587,"title":{},"body":{"controllers/RoleController.html":{}}}],["role(permissionrole.createtraining",{"_index":667,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.createtraining)@post('create",{"_index":643,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.deletelesson)@delete(':id/delete",{"_index":203,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.deletemodule)@delete(':id/delete",{"_index":285,"title":{},"body":{"controllers/ModuleController.html":{}}}],["role(permissionrole.deletepermission)@delete(':id/delete",{"_index":334,"title":{},"body":{"controllers/PermissionController.html":{}}}],["role(permissionrole.deletepermission)@put(':id/update",{"_index":337,"title":{},"body":{"controllers/PermissionController.html":{}}}],["role(permissionrole.deleterole)@delete(':id/delete",{"_index":591,"title":{},"body":{"controllers/RoleController.html":{}}}],["role(permissionrole.deletetraining",{"_index":674,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.deletetraining)@delete(':id/delete",{"_index":647,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.deleteuser)@delete(':id/delete",{"_index":687,"title":{},"body":{"controllers/UserController.html":{}}}],["role(permissionrole.getlesson)@get(':id",{"_index":208,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.getlistlesson)@get('list",{"_index":205,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.getlistmodule)@get('list",{"_index":275,"title":{},"body":{"controllers/ModuleController.html":{}}}],["role(permissionrole.getlistpermission)@get('list",{"_index":324,"title":{},"body":{"controllers/PermissionController.html":{}}}],["role(permissionrole.getlistrole)@get('list",{"_index":581,"title":{},"body":{"controllers/RoleController.html":{}}}],["role(permissionrole.getlisttraining",{"_index":657,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.getlisttraining)@get('list",{"_index":634,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.getlistuser)@get('list",{"_index":689,"title":{},"body":{"controllers/UserController.html":{}}}],["role(permissionrole.getmodule)@get(':id",{"_index":278,"title":{},"body":{"controllers/ModuleController.html":{}}}],["role(permissionrole.getpermission)@get(':id",{"_index":327,"title":{},"body":{"controllers/PermissionController.html":{}}}],["role(permissionrole.getrole)@get(':id",{"_index":584,"title":{},"body":{"controllers/RoleController.html":{}}}],["role(permissionrole.gettraining",{"_index":659,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.gettraining)@get(':id",{"_index":637,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.gettrainingstudents",{"_index":662,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.gettrainingstudents)@get(':id/students",{"_index":640,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.getuser)@get(':id",{"_index":692,"title":{},"body":{"controllers/UserController.html":{}}}],["role(permissionrole.lessonvalidation",{"_index":254,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.lessonvalidation)@post(':id/validation",{"_index":216,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.setroleuser)@put(':id/setrole",{"_index":695,"title":{},"body":{"controllers/UserController.html":{}}}],["role(permissionrole.subscribe)@post(':id/subscribe",{"_index":650,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.updatelesson)@put(':id/update",{"_index":219,"title":{},"body":{"controllers/LessonController.html":{}}}],["role(permissionrole.updatemodule)@put(':id/update",{"_index":288,"title":{},"body":{"controllers/ModuleController.html":{}}}],["role(permissionrole.updaterole)@put(':id/update",{"_index":594,"title":{},"body":{"controllers/RoleController.html":{}}}],["role(permissionrole.updatetraining",{"_index":676,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role(permissionrole.updatetraining)@put(':id/update",{"_index":653,"title":{},"body":{"controllers/TrainingController.html":{}}}],["role/create",{"_index":899,"title":{},"body":{"index.html":{}}}],["role/list",{"_index":897,"title":{},"body":{"index.html":{}}}],["role/{id",{"_index":895,"title":{},"body":{"index.html":{}}}],["role/{id}/update",{"_index":902,"title":{},"body":{"index.html":{}}}],["rolecontroller",{"_index":52,"title":{"controllers/RoleController.html":{}},"body":{"modules/AppModule.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["rolecreate",{"_index":577,"title":{},"body":{"controllers/RoleController.html":{}}}],["rolecreate(roledata",{"_index":586,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledata",{"_index":589,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledata.addpermissions",{"_index":614,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledata.name",{"_index":609,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledelete",{"_index":578,"title":{},"body":{"controllers/RoleController.html":{}}}],["roledelete(id",{"_index":590,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleid",{"_index":718,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["rolemodel",{"_index":596,"title":{},"body":{"controllers/RoleController.html":{}}}],["roles",{"_index":343,"title":{},"body":{"controllers/PermissionController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles_key",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleupdate",{"_index":579,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleupdate(id",{"_index":593,"title":{},"body":{"controllers/RoleController.html":{}}}],["run",{"_index":531,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"index.html":{}}}],["running",{"_index":824,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":523,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["search",{"_index":520,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["searched",{"_index":394,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["secret",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":534,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["select",{"_index":236,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/TrainingController.html":{}}}],["server",{"_index":530,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["service/auth.service",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["service/user.service",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["set",{"_index":533,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["setmetadata(is_public_key",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setuserrole",{"_index":684,"title":{},"body":{"controllers/UserController.html":{}}}],["setuserrole(userdata",{"_index":694,"title":{},"body":{"controllers/UserController.html":{}}}],["signed",{"_index":541,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["signin",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(name",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(name:string",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(signindata",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindata",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindata.password",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["signupuser",{"_index":685,"title":{},"body":{"controllers/UserController.html":{}}}],["signupuser(userdata",{"_index":698,"title":{},"body":{"controllers/UserController.html":{}}}],["small",{"_index":786,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["specific",{"_index":794,"title":{},"body":{"index.html":{}}}],["src/.../auth.service.ts",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constant.ts",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../decorator.ts",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permissionrole.ts",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.controller.ts",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.controller.ts",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":86,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.guard.ts",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:14",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:17",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:49",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/constant.ts",{"_index":757,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorator.ts",{"_index":758,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/permissionrole",{"_index":229,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{}}}],["src/auth/permissionrole.ts",{"_index":759,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/auth.controller.ts",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/controller/auth.controller.ts:18",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/controller/lesson.controller.ts",{"_index":193,"title":{},"body":{"controllers/LessonController.html":{},"coverage.html":{}}}],["src/controller/lesson.controller.ts:121",{"_index":204,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:26",{"_index":206,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:42",{"_index":209,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:59",{"_index":214,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:79",{"_index":217,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/lesson.controller.ts:98",{"_index":220,"title":{},"body":{"controllers/LessonController.html":{}}}],["src/controller/module.controller.ts",{"_index":269,"title":{},"body":{"controllers/ModuleController.html":{},"coverage.html":{}}}],["src/controller/module.controller.ts:111",{"_index":289,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:26",{"_index":276,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:46",{"_index":279,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:70",{"_index":282,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/module.controller.ts:98",{"_index":286,"title":{},"body":{"controllers/ModuleController.html":{}}}],["src/controller/permission.controller.ts",{"_index":315,"title":{},"body":{"controllers/PermissionController.html":{},"coverage.html":{}}}],["src/controller/permission.controller.ts:25",{"_index":325,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:29",{"_index":323,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:49",{"_index":328,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:57",{"_index":331,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:76",{"_index":335,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/permission.controller.ts:89",{"_index":338,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/controller/role.controller.ts",{"_index":574,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/role.controller.ts:102",{"_index":595,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:161",{"_index":580,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:27",{"_index":582,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:43",{"_index":585,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:60",{"_index":588,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/role.controller.ts:89",{"_index":592,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/controller/training.controller.ts",{"_index":625,"title":{},"body":{"controllers/TrainingController.html":{},"coverage.html":{}}}],["src/controller/training.controller.ts:111",{"_index":651,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/training.controller.ts:128",{"_index":648,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/training.controller.ts:139",{"_index":654,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/training.controller.ts:27",{"_index":635,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/training.controller.ts:45",{"_index":638,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/training.controller.ts:64",{"_index":641,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/training.controller.ts:83",{"_index":644,"title":{},"body":{"controllers/TrainingController.html":{}}}],["src/controller/user.controller.ts",{"_index":680,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controller/user.controller.ts:27",{"_index":690,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:36",{"_index":693,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:47",{"_index":696,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:64",{"_index":700,"title":{},"body":{"controllers/UserController.html":{}}}],["src/controller/user.controller.ts:83",{"_index":688,"title":{},"body":{"controllers/UserController.html":{}}}],["src/main.ts",{"_index":763,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma",{"_index":360,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["src/prisma.service",{"_index":225,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"injectables/UserService.html":{}}}],["src/prisma.service.ts",{"_index":562,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:12",{"_index":568,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:8",{"_index":570,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/service/auth.service",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/service/auth.service.ts",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/service/auth.service.ts:13",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/service/auth.service.ts:7",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/service/user.service.ts",{"_index":733,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/service/user.service.ts:13",{"_index":739,"title":{},"body":{"injectables/UserService.html":{}}}],["src/service/user.service.ts:8",{"_index":737,"title":{},"body":{"injectables/UserService.html":{}}}],["start:dev",{"_index":827,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":829,"title":{},"body":{"index.html":{}}}],["started",{"_index":785,"title":{"index.html":{}},"body":{}}],["statements",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":380,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["statuscode",{"_index":561,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["store",{"_index":547,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["stored",{"_index":415,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["strip_password",{"_index":734,"title":{},"body":{"injectables/UserService.html":{}}}],["strip_password(user",{"_index":736,"title":{},"body":{"injectables/UserService.html":{}}}],["strip_passwords",{"_index":735,"title":{},"body":{"injectables/UserService.html":{}}}],["strip_passwords(users",{"_index":738,"title":{},"body":{"injectables/UserService.html":{}}}],["structures",{"_index":804,"title":{},"body":{"index.html":{}}}],["student",{"_index":791,"title":{},"body":{"index.html":{}}}],["students",{"_index":795,"title":{},"body":{"index.html":{}}}],["support",{"_index":502,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"modules.html":{}}}],["svg",{"_index":915,"title":{},"body":{"modules.html":{}}}],["switch(exception.code",{"_index":383,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["table",{"_index":476,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":707,"title":{},"body":{"controllers/UserController.html":{}}}],["text",{"_index":893,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":571,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":572,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindata.name",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.extracttokenfromheader(request",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.jwtservice.signasync(payload",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.prismaservice.lesson.create",{"_index":248,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.delete",{"_index":268,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.findmany",{"_index":233,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.findunique",{"_index":240,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.lesson.update",{"_index":263,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.prismaservice.module.create",{"_index":303,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.module.delete",{"_index":308,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.module.findmany",{"_index":294,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.module.findunique",{"_index":297,"title":{},"body":{"controllers/ModuleController.html":{}}}],["this.prismaservice.permission.create",{"_index":349,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.delete",{"_index":353,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.findmany",{"_index":342,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.findunique({where:{id:number(id",{"_index":346,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.permission.update",{"_index":357,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.prismaservice.role.create",{"_index":608,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.role.delete",{"_index":610,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.role.findmany",{"_index":602,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.role.findunique",{"_index":606,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.prismaservice.training.create",{"_index":669,"title":{},"body":{"controllers/TrainingController.html":{}}}],["this.prismaservice.training.delete",{"_index":675,"title":{},"body":{"controllers/TrainingController.html":{}}}],["this.prismaservice.training.findmany",{"_index":658,"title":{},"body":{"controllers/TrainingController.html":{}}}],["this.prismaservice.training.findunique",{"_index":661,"title":{},"body":{"controllers/TrainingController.html":{}}}],["this.prismaservice.traininguser.create",{"_index":672,"title":{},"body":{"controllers/TrainingController.html":{}}}],["this.prismaservice.userlesson.create",{"_index":257,"title":{},"body":{"controllers/LessonController.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":162,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.strip_password(u",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.strip_password(u",{"_index":715,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.strip_passwords(allusers",{"_index":709,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.create",{"_index":728,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.delete",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.findmany",{"_index":706,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.findunique",{"_index":714,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.user.update",{"_index":719,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.user.findunique({where:{name:name",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["through",{"_index":806,"title":{},"body":{"index.html":{}}}],["throw",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/ModuleController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["timed",{"_index":484,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["timeout",{"_index":490,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["todo",{"_index":835,"title":{},"body":{"index.html":{}}}],["token",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{},"index.html":{}}}],["training",{"_index":626,"title":{},"body":{"controllers/TrainingController.html":{},"index.html":{}}}],["training/create",{"_index":866,"title":{},"body":{"index.html":{}}}],["training/list",{"_index":864,"title":{},"body":{"index.html":{}}}],["training/{id",{"_index":862,"title":{},"body":{"index.html":{}}}],["training/{id}/update",{"_index":872,"title":{},"body":{"index.html":{}}}],["trainingcontroller",{"_index":50,"title":{"controllers/TrainingController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TrainingController.html":{},"coverage.html":{}}}],["trainingcreate",{"_index":630,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingcreate(trainingdata",{"_index":642,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingdata",{"_index":645,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingdata.addmodules",{"_index":679,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingdata.name",{"_index":670,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingdelete",{"_index":631,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingdelete(id",{"_index":646,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingid",{"_index":673,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingmodel",{"_index":655,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainings",{"_index":799,"title":{},"body":{"index.html":{}}}],["trainingsubscribe",{"_index":632,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingsubscribe(request",{"_index":649,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingupdate",{"_index":633,"title":{},"body":{"controllers/TrainingController.html":{}}}],["trainingupdate(id",{"_index":652,"title":{},"body":{"controllers/TrainingController.html":{}}}],["transaction",{"_index":514,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["transactions",{"_index":527,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["trouver",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{},"classes/PrismaClientExceptionFilter.html":{}}}],["trying",{"_index":450,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["très",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/PermissionController.html":{},"classes/PrismaClientExceptionFilter.html":{},"injectables/PrismaService.html":{},"controllers/RoleController.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["u",{"_index":713,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["un",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["undefined",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/UserController.html":{}}}],["unique",{"_index":400,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["unlicensed",{"_index":925,"title":{},"body":{"properties.html":{}}}],["update",{"_index":356,"title":{},"body":{"controllers/PermissionController.html":{},"index.html":{}}}],["updatelesson",{"_index":201,"title":{},"body":{"controllers/LessonController.html":{}}}],["updatelesson(id",{"_index":218,"title":{},"body":{"controllers/LessonController.html":{}}}],["use",{"_index":519,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["useclass",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":504,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["user",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TrainingController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["user's",{"_index":860,"title":{},"body":{"index.html":{}}}],["user.id",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roleid",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/list",{"_index":846,"title":{},"body":{"index.html":{}}}],["user/signup",{"_index":850,"title":{},"body":{"index.html":{}}}],["user/{id",{"_index":840,"title":{},"body":{"index.html":{}}}],["user/{id}/setrole",{"_index":859,"title":{},"body":{"index.html":{}}}],["user[\"password",{"_index":743,"title":{},"body":{"injectables/UserService.html":{}}}],["usercontroller",{"_index":47,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["userdata",{"_index":697,"title":{},"body":{"controllers/UserController.html":{}}}],["userdata.name",{"_index":729,"title":{},"body":{"controllers/UserController.html":{}}}],["userdata.password",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["userdata.roleid",{"_index":720,"title":{},"body":{"controllers/UserController.html":{}}}],["userid",{"_index":258,"title":{},"body":{"controllers/LessonController.html":{},"controllers/TrainingController.html":{}}}],["usermodel",{"_index":701,"title":{},"body":{"controllers/UserController.html":{}}}],["username",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["users",{"_index":665,"title":{},"body":{"controllers/TrainingController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["users.foreach(u",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":42,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":544,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["valid",{"_index":420,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["validate",{"_index":430,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["validation",{"_index":422,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["value",{"_index":387,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":926,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":922,"title":{},"body":{"properties.html":{}}}],["violate",{"_index":452,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["violation",{"_index":438,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["void",{"_index":372,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["vraiment",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["where:{id:number(id",{"_index":241,"title":{},"body":{"controllers/LessonController.html":{},"controllers/ModuleController.html":{},"controllers/RoleController.html":{}}}],["write",{"_index":552,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["x",{"_index":837,"title":{},"body":{"index.html":{}}}],["you're",{"_index":546,"title":{},"body":{"classes/PrismaClientExceptionFilter.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAppModule\n\nAppModule\n\nAuthService  -->\n\nAppModule->AuthService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuthService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            UserController\n                        \n                        \n                            ModuleController\n                        \n                        \n                            LessonController\n                        \n                        \n                            TrainingController\n                        \n                        \n                            PermissionController\n                        \n                        \n                            RoleController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { AppController } from './app.controller';\nimport { UserController } from './controller/user.controller';\nimport { ModuleController } from \"./controller/module.controller\";\nimport { LessonController } from \"./controller/lesson.controller\";\nimport { TrainingController } from \"./controller/training.controller\";\nimport { RoleController } from \"./controller/role.controller\";\nimport { PermissionController } from './controller/permission.controller';\nimport { AuthController } from './controller/auth.controller';\n\nimport { AppService } from './app.service';\nimport { PrismaService } from './prisma.service';\nimport { UserService } from './service/user.service';\nimport { AuthService } from './service/auth.service';\n\nimport { jwtConstants } from './auth/constant';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AuthGuard } from './auth/auth.guard';\n\n\n\n@Module({\n  imports: [\n    JwtModule.register({\n      global: true,\n      secret: jwtConstants.secret,\n      signOptions: {\n        expiresIn: '3600s'\n      }\n    })\n  ],\n  controllers: [\n    AppController,\n    UserController,\n    ModuleController,\n    LessonController,\n    TrainingController,\n    PermissionController,\n    RoleController,\n    AuthController\n  ],\n  providers: [\n    AppService,\n    UserService,\n    PrismaService,\n    UserService,\n    AuthService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard\n    }\n  ],\n  exports: [\n    AuthService\n  ]\n})\nexport class AppModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Check the API documentation for a list of available endpoints';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(signInData: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Public()@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/controller/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInData\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Post,\n    HttpCode,\n    HttpStatus,\n} from '@nestjs/common';\nimport { Public } from 'src/auth/decorator';\nimport { AuthService } from 'src/service/auth.service';\n\n@Controller()\nexport class AuthController{\n    constructor(private authService: AuthService){}\n\n    @HttpCode(HttpStatus.OK)\n    @Public()\n    @Post('login')\n    signIn(\n        @Body() signInData: Record\n    ) {\n        return this.authService.signIn(signInData.name, signInData.password);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException\n} from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport { jwtConstants } from './constant'\nimport { Request } from 'express'\nimport { IS_PUBLIC_KEY, ROLES_KEY } from './decorator'\nimport { Reflector } from '@nestjs/core'\n\n@Injectable()\nexport class AuthGuard implements CanActivate{\n    constructor(private jwtService: JwtService, private reflector: Reflector){}\n\n    async canActivate(context: ExecutionContext): Promise{\n        const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n            context.getHandler(),\n            context.getClass()\n        ]);\n        if(isPublic) return true;\n        const request = context.switchToHttp().getRequest();\n        const token = this.extractTokenFromHeader(request);\n        if (!token) {\n            throw new UnauthorizedException()\n        }\n        try{\n            const payload = await this.jwtService.verifyAsync(\n                token,\n                {\n                    secret: jwtConstants.secret\n                }\n            );\n\n            request[\"user\"] = payload;\n        } catch {\n            throw new UnauthorizedException();\n        }\n\n        const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        return requiredRoles[0].includes(request.user.role);\n    }\n\n    private extractTokenFromHeader(request: Request): string | undefined {\n        const [type, token] = request.headers.authorization?.split(' ') ?? [];\n        return type === \"Bearer\" ? token : undefined;\n    }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/service/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(name: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/service/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { JwtService } from \"@nestjs/jwt\";\nconst argon2 = require(\"argon2\");\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private usersService: UserService,\n        private jwtService: JwtService\n    ){}\n\n    async signIn(name:string, password:string){\n        const user = await this.usersService.user.findUnique({where:{name:name}});\n        if(user === null) throw new UnauthorizedException();\n        if(!password || password === \"\") throw new UnauthorizedException();\n        if(await argon2.verify(user.password, password)){\n            const payload = {\n                id: user.id,\n                username: name,\n                role: user.roleId\n            };\n            return {\n                access_token: await this.jwtService.signAsync(payload)\n            }\n        }else{\n            throw new UnauthorizedException()\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LessonController.html":{"url":"controllers/LessonController.html","title":"controller - LessonController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LessonController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/lesson.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                lesson\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                deleteLesson\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllLessons\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getLessonById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                lessonCreate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                lessonValidation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateLesson\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        deleteLesson\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteLesson(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deleteLesson)@Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllLessons\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllLessons()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getListLesson)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getLessonById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLessonById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getLesson)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        lessonCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    lessonCreate(request: Request, lessonData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.createLesson)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lessonData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        lessonValidation\n                        \n                    \n                \n            \n            \n                \n                    \n                    lessonValidation(request: Request, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.lessonValidation)@Post(':id/validation')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        updateLesson\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLesson(id: string, lessonData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.updateLesson)@Put(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/controller/lesson.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lessonData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Req\n} from '@nestjs/common'\nimport { PrismaService } from 'src/prisma.service'\nimport { Lesson as LessonModel } from '@prisma/client'\nimport { Role } from 'src/auth/decorator'\nimport { permissionRole } from \"src/auth/permissionRole\"\nimport { Request } from 'express'\nimport { JwtService } from '@nestjs/jwt'\n\n@Controller(\"lesson\")\nexport class LessonController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Role(\n\t\tpermissionRole.getListLesson\n\t)\n    @Get(\"list\")\n    async getAllLessons(): Promise{\n        return this.prismaService.lesson.findMany(\n            {include: {\n                author: {\n                    select: {\n                        name: true\n                    }\n                }\n            }}\n        )\n    }\n\n    @Role(\n\t\tpermissionRole.getLesson\n\t)\n    @Get(\":id\")\n    async getLessonById(@Param('id') id: string): Promise{\n        return this.prismaService.lesson.findUnique({\n            where:{id:Number(id)},\n            include: {\n                author: {\n                    select: {\n                        name: true\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.createLesson\n\t)\n    @Post('create')\n    async lessonCreate(\n        @Req() request: Request,\n        @Body() lessonData: {\n            name: string; content?: string\n        }\n    ): Promise{\n        const jwt = request.headers.authorization.replace(\"Bearer \",\"\");\n        const jwtService = new JwtService()\n        const payload = jwtService.decode(jwt)\n        return this.prismaService.lesson.create({\n            data:{\n                name: lessonData.name,\n                content: lessonData?.content,\n                authorId: payload[\"id\"]\n            }\n        })\n    }\n\n    @Role(permissionRole.lessonValidation)\n    @Post(\":id/validation\")\n    async lessonValidation(\n        @Req() request: Request,\n        @Param('id') id: string\n    ): Promise{\n        const jwt = request.headers.authorization.replace(\"Bearer \",\"\");\n        const jwtService = new JwtService()\n        const payload = jwtService.decode(jwt)\n        await this.prismaService.userLesson.create({\n            data:{\n                userId: payload[\"id\"],\n                lessonId: Number(id)\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.updateLesson\n\t)\n    @Put(\":id/update\")\n    async updateLesson(\n        @Param('id') id: string,\n        @Body() lessonData:{\n            name?: string,\n            content?: string\n        }\n        ): Promise{\n        \n        return this.prismaService.lesson.update({\n            where: {\n                id: Number(id)\n            },\n            data: {\n                name: lessonData.name,\n                content: lessonData.content\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.deleteLesson\n\t)\n    @Delete(\":id/delete\")\n    async deleteLesson(\n        @Param(\"id\") id: string\n    ): Promise{\n        return this.prismaService.lesson.delete({\n            where: {id: Number(id)}\n        })\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ModuleController.html":{"url":"controllers/ModuleController.html","title":"controller - ModuleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ModuleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/module.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                module\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getAllModules\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getModuleById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                moduleCreate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                moduleDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                moduleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllModules\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllModules()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getListModule)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getModuleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getModuleById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getModule)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        moduleCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleCreate(moduleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.createModule)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    moduleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        moduleDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deleteModule)@Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        moduleUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleUpdate(id: string, moduleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.updateModule)@Put(':id/update/')\n                \n            \n\n            \n                \n                    Defined in src/controller/module.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    moduleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    NotFoundException\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Module as ModuleModel\n} from \"@prisma/client\"\nimport { Role } from \"src/auth/decorator\"\nimport { permissionRole } from \"src/auth/permissionRole\"\n\n@Controller(\"module\")\nexport class ModuleController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Role(\n\t\tpermissionRole.getListModule\n\t)\n    @Get(\"list\")\n    async getAllModules(): Promise{\n        return this.prismaService.module.findMany({\n            include: {\n                lesson:{\n                    include:{\n                        lesson:{\n                            select: {\n                                name: true\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.getModule\n\t)\n    @Get(\":id\")\n    async getModuleById(\n            @Param(\"id\") id: string\n        ): Promise{\n        if(Number.isNaN(Number(id))) throw new NotFoundException()\n        return this.prismaService.module.findUnique({\n            where:{id:Number(id)},\n            include: {\n                lesson:{\n                    include:{\n                        lesson:{\n                            select: {\n                                name: true\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.createModule\n\t)\n    @Post(\"create\")\n    async moduleCreate(\n        @Body() moduleData: {\n            name?: string;\n            lessons: number[]\n        }\n    ): Promise{\n        // Create module\n        const module = await this.prismaService.module.create({\n            data:{\n                name: moduleData.name,\n            }\n        });\n        // Create relations with lessons\n        for(let i=0;i{\n        // Delete module\n        return this.prismaService.module.delete({\n            where: {id:Number(id)}\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.updateModule\n\t)\n    @Put(\":id/update/\")\n    async moduleUpdate(\n        @Param(\"id\") id:string,\n        @Body() moduleData: {\n            name?: string,\n            addLessons: number[],\n            deleteLessons: number[]\n        }\n    ): Promise{\n        // Create relations with lessons\n        if (moduleData.addLessons) {\n            for(let i=0;i\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionController.html":{"url":"controllers/PermissionController.html","title":"controller - PermissionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/permission.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permission\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllPermissionWithRole\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllRole\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getPermissionById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                permissionCreate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                permissionDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                permissionUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPermissionWithRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPermissionWithRole()\n                \n            \n\n\n            \n                \n                    Defined in src/controller/permission.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRole()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getListPermission)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getPermissionById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPermissionById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getPermission)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        permissionCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    permissionCreate(permissionData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.createPermission)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissionData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        permissionDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    permissionDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deletePermission)@Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        permissionUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    permissionUpdate(id: string, permissionData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deletePermission)@Put(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/controller/permission.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    permissionData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Permission as PermissionModel\n} from \"@prisma/client\"\nimport { Role } from \"src/auth/decorator\"\nimport { permissionRole } from \"src/auth/permissionRole\"\n\n@Controller(\"permission\")\nexport class PermissionController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Role(\n\t\tpermissionRole.getListPermission\n\t)\n    @Get(\"list\")\n    async getAllRole(): Promise{\n        return this.prismaService.permission.findMany()\n    }\n\n    async getAllPermissionWithRole(): Promise{\n        return this.prismaService.permission.findMany({\n            include: {\n                roles:{\n                    include:{\n                        role: {\n                            select:{\n                                name: true\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.getPermission\n\t)\n    @Get(\":id\")\n    async getPermissionById(@Param(\"id\") id:string): Promise{\n        return this.prismaService.permission.findUnique({where:{id:Number(id)}})\n    }\n\n    @Role(\n\t\tpermissionRole.createPermission\n\t)\n    @Post(\"create\")\n    async permissionCreate(\n        @Body() permissionData: {\n            name: string,\n            description: string\n        } \n    ): Promise{\n        // Create permission\n        return this.prismaService.permission.create({\n            data:{\n                name: permissionData.name,\n                description: permissionData.description\n            }\n        });\n    }\n\n    @Role(\n\t\tpermissionRole.deletePermission\n\t)\n    @Delete(\":id/delete\")\n    async permissionDelete(\n        @Param(\"id\") id: string\n    ): Promise{\n        // Delete permission\n        return this.prismaService.permission.delete({\n            where: {id: Number(id)}\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.deletePermission\n\t)\n    @Put(\":id/update\")\n    async permissionUpdate(\n        @Param(\"id\") id:string,\n        @Body() permissionData: {\n            name?:string,\n            description?:string\n        }\n    ): Promise{\n        // Update permission\n        return this.prismaService.permission.update({\n            where: {id: Number(id)},\n            data: {\n                name: permissionData.name,\n                description: permissionData.description\n            }\n        })\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrismaClientExceptionFilter.html":{"url":"classes/PrismaClientExceptionFilter.html","title":"class - PrismaClientExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrismaClientExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma-client-exception/prisma-client-exception.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma-client-exception/prisma-client-exception.filter.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Prisma.PrismaClientKnownRequestError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpException, HttpStatus } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\nimport { Prisma } from '@prisma/client';\nimport { Response } from 'express';\n\n@Catch(Prisma.PrismaClientKnownRequestError)\nexport class PrismaClientExceptionFilter extends BaseExceptionFilter {\n  catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const status = HttpStatus.BAD_REQUEST;\n    let message: string;\n    switch(exception.code){\n      case 'P2000':\n        message = `The provided value for the column is too long for the column's type. Column :${exception.meta.column_name}`;\n        break;\n      case \"P2001\":\n        message = `The record searched for in the where conditions (${exception.meta.model_name}.${exception.meta.argument_name} = ${exception.meta.argument_value}) does not exist`;\n        break;\n      case \"P2002\":\n        message = `Unique constraint failed on the ${exception.meta.target}`;\n        break;\n      case \"P2003\":\n        message = `Foreign key constaint failed on the field: ${exception.meta.field_name}`;\n        break;\n      case \"P2004\":\n        message = `A constraint failed on the database: ${exception.meta.database_error}`;\n        break;\n      case \"P2005\":\n        message = `The value ${exception.meta.field_value} stored in the database for the ${exception.meta.field_name} is invalid for the field's type`;\n        break;\n      case \"P2006\":\n        message = `The provided value ${exception.meta.field_value} for ${exception.meta.model_name} field ${exception.meta.field_name} is not valid`;\n        break;\n      case \"P2007\":\n        message = `Data validation error ${exception.meta.database_error}`;\n        break;\n      case \"P2008\":\n        message = `Failed to parse the query ${exception.meta.query_parsing_error} at ${exception.meta.query_position}`;\n        break;\n      case \"P2009\":\n        message = `Failed to validate the query: ${exception.meta.query_validation_error} at ${exception.meta.query_position}`;\n        break;\n      case \"P2010\":\n        message = `Raw query failed. Code: ${exception.meta.code}. Message: ${exception.meta.message}`;\n        break;\n      case \"P2011\":\n        message = `Null constraint violation on the ${exception.meta.constraint}`;\n        break;\n      case \"P2012\":\n        message = `Missing a required value at ${exception.meta.path}`;\n        break;\n      case \"P2013\":\n        message = `Missing the required argument ${exception.meta.argument_name} for field ${exception.meta.field_name} on ${exception.meta.object_name}.`;\n        break;\n      case \"P2014\":\n        message = `The change you are trying to make would violate the required relation '${exception.meta.relation_name}' between the ${exception.meta.model_a_name} and ${exception.meta.model_b_name} models.`;\n        break;\n      case \"P2015\":\n        message = `A related record could not be found. ${exception.meta.details}`;\n        break;\n      case \"P2016\":\n        message = `Query interpretation error. ${exception.meta.details}`;\n        break;\n      case \"P2017\":\n        message= `The records for relation ${exception.meta.relation_name} between the ${exception.meta.parent_name} and ${exception.meta.child_name} models are not connected.`;\n        break;\n      case \"P2018\":\n        message = `The required connected records were not found. ${exception.meta.details}`;\n        break;\n      case \"P2019\":\n        message = `Input error. ${exception.meta.details}`;\n        break;\n      case \"P2020\":\n        message = `Value out of range for the type. ${exception.meta.details}`;\n        break;\n      case \"P2021\":\n        message = `The table ${exception.meta.table} does not exist in the current database.`;\n        break;\n      case \"P2022\":\n        message = `The column ${exception.meta.column} does not exist in the current database.`;\n        break;\n      case \"P2023\":\n        message = `Inconsistent column data: ${exception.meta.message}`;\n        break;\n      case \"P2024\":\n        message = `Timed out fetching a new connection from the connection pool. (More info: http://pris.ly/d/connection-pool (Current connection pool timeout: ${exception.meta.timeout}, connection limit: ${exception.meta.connection_limit})`;\n        break;\n      case \"P2025\":\n        message = `An operation failed because it depends on one or more records that were required but not found. ${exception.meta.cause}`;\n        break;\n      case \"P2026\":\n        message = `The current database provider doesn't support a feature that the query used: ${exception.meta.feature}`;\n        break;\n      case \"P2027\":\n        message = `Multiple errors occurred on the database during query execution: ${exception.meta.errors}`\n        break;\n      case \"P2028\":\n        message = `Transaction API error: ${exception.meta.error}`;\n        break;\n      case \"P2030\":\n        message = `Cannot find a fulltext index to use for the search, try adding a @@fulltext([Fields...]) to your schema`;\n        break;\n      case \"P2031\":\n        message = `Prisma needs to perform transactions, which requires your MongoDB server to be run as a replica set. See details: https://pris.ly/d/mongodb-replica-set`\n        break;\n      case \"P2032\":\n        message = `A number used in the query does not fit into a 64 bit signed integer. Consider using BigInt as field type if you're trying to store large integers`;\n        break;\n      case \"P2034\":\n        message = `Transaction failed due to a write conflict or a deadlock. Please retry your transaction`;\n        break;\n      default: message = \"I don't know !\"\n    }\n\n    response.status(status).json({\n      statusCode: status,\n      message: message\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, INestApplication } from '@nestjs/common'\nimport { PrismaClient } from '@prisma/client'\n\n@Injectable()\nexport class PrismaService extends PrismaClient\n  implements OnModuleInit {\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });    \n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                role\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFichierPermission\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllRole\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getRoleById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                roleCreate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                roleDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                roleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createFichierPermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    createFichierPermission()\n                \n            \n\n\n            \n                \n                    Defined in src/controller/role.controller.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllRole()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getListRole)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getRoleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoleById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getRole)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        roleCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    roleCreate(roleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.createRole)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        roleDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    roleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deleteRole)@Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        roleUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    roleUpdate(id: string, roleData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.updateRole)@Put(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/controller/role.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roleData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete\n} from \"@nestjs/common\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Role as RoleModel\n} from \"@prisma/client\"\nimport { PermissionController } from \"./permission.controller\"\nimport { Role } from \"src/auth/decorator\"\nimport { permissionRole } from \"src/auth/permissionRole\"\nconst fs = require(\"fs\")\n\n@Controller(\"role\")\nexport class RoleController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Role(\n\t\tpermissionRole.getListRole\n\t)\n    @Get(\"list\")\n    async getAllRole(): Promise{\n        return this.prismaService.role.findMany({\n            include:{\n                permissions:{\n                    include:{\n                        permission: true\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.getRole\n\t)\n    @Get(\":id\")\n    async getRoleById(@Param(\"id\") id:string): Promise{\n        return this.prismaService.role.findUnique({\n            where:{id:Number(id)},\n            include:{\n                permissions:{\n                    include:{\n                        permission: true\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.createRole\n\t)\n    @Post(\"create\")\n    async roleCreate(\n        @Body() roleData: {\n            name: string,\n            permissions?: number[]\n        }\n    ): Promise{\n        // Create role\n        const role = this.prismaService.role.create({\n            data:{\n                name: roleData.name,\n            }\n        });\n        // Create relations with permissions\n        for(let i=0;i{\n        // Delete role\n        return this.prismaService.role.delete({\n            where: {id:Number(id)}\n        })\n    }\n\n    @Role(\n\t\tpermissionRole.updateRole\n\t)\n    @Put(\":id/update\")\n    async roleUpdate(\n        @Param(\"id\") id:string,\n        @Body() roleData: {\n            name?: string,\n            addPermissions?: number[],\n            deletePermissions?: number[] \n        }\n    ): Promise{\n        // Create relations with permissions\n        if (roleData.addPermissions) {\n            for(let i=0;i{\n            const permissionController = new PermissionController(new PrismaService)\n            let permissions: object = {};\n            (await permissionController.getAllPermissionWithRole()).forEach(item => {\n                permissions[item[\"name\"]] = []\n                item[\"roles\"].forEach((role:object) => {\n                    permissions[item[\"name\"]].push(role[\"roleId\"]);\n                });\n            });\n\n            fs.writeFile(\"src/auth/permissionRole.ts\",`export const permissionRole = ${JSON.stringify(permissions)}`, (e) => {\n                if(e) throw e;\n            });\n            return true\n        }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TrainingController.html":{"url":"controllers/TrainingController.html","title":"controller - TrainingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TrainingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/training.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                training\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getAllTraining\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getTrainingById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getTrainingStudent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                trainingCreate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                trainingDelete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                trainingSubscribe\n                            \n                            \n                                    \n                                    \n                                    Async\n                                trainingUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllTraining\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTraining()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getListTraining)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getTrainingById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrainingById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getTraining)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getTrainingStudent\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrainingStudent(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getTrainingStudents)@Get(':id/students')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        trainingCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    trainingCreate(trainingData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.createTraining)@Post('create')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    trainingData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        trainingDelete\n                        \n                    \n                \n            \n            \n                \n                    \n                    trainingDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deleteTraining)@Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        trainingSubscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    trainingSubscribe(request: Request, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.subscribe)@Post(':id/subscribe')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        trainingUpdate\n                        \n                    \n                \n            \n            \n                \n                    \n                    trainingUpdate(id: string, trainingData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.updateTraining)@Put(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/controller/training.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trainingData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import{\n    Controller,\n    Get,\n    Param,\n    Post,\n    Body,\n    Put,\n    Delete,\n    Req\n} from \"@nestjs/common\"\nimport { Request } from \"express\"\nimport { PrismaService } from \"src/prisma.service\"\nimport {\n    Training as TrainingModel\n} from \"@prisma/client\"\nimport { permissionRole } from \"src/auth/permissionRole\"\nimport { Role } from \"src/auth/decorator\"\nimport { JwtService } from \"@nestjs/jwt\"\n\n\n@Controller(\"training\")\nexport class TrainingController{\n    constructor(private readonly prismaService: PrismaService){}\n\n    @Role(permissionRole.getListTraining)\n    @Get(\"list\")\n    async getAllTraining(): Promise{\n        return this.prismaService.training.findMany({\n            include:{\n                modules:{\n                    include:{\n                        module:{\n                            select:{\n                                name: true\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(permissionRole.getTraining)\n    @Get(\":id\")\n    async getTrainingById(@Param(\"id\") id:string): Promise{\n        return this.prismaService.training.findUnique({\n            where: { id: Number(id) },\n            include:{\n                modules:{\n                    include:{\n                        module:{\n                            select:{\n                                name: true\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(permissionRole.getTrainingStudents)\n    @Get(\":id/students\")\n    async getTrainingStudent(@Param(\"id\") id:string): Promise{\n        return this.prismaService.training.findUnique({\n            where: { id: Number(id) },\n            include:{\n                users:{\n                    include:{\n                        user: {\n                            select:{\n                                name:true\n                            }\n                        }\n                    }\n                }\n            }\n        })\n    }\n\n    @Role(permissionRole.createTraining)\n    @Post(\"create\")\n    async trainingCreate(\n        @Body() trainingData: {\n            name: string,\n            modules: number[],\n            coachId: number\n        }\n    ): Promise{\n        // Create training\n        const training = await this.prismaService.training.create({\n            data:{\n                name: trainingData.name,\n                coachId: Number(trainingData.coachId)\n            }\n        });\n        // Create relations with modules\n        for(let i=0;i{\n        const jwt = request.headers.authorization.replace(\"Bearer \",\"\");\n        const jwtService = new JwtService()\n        const payload = jwtService.decode(jwt)\n        await this.prismaService.trainingUser.create({\n            data:{\n                userId: payload[\"id\"],\n                trainingId: Number(id)\n            }\n        })\n    }\n\n    @Role(permissionRole.deleteTraining)\n    @Delete(\":id/delete\")\n    async trainingDelete(\n        @Param(\"id\") id:string\n    ): Promise{\n        // Delete training\n        return this.prismaService.training.delete({\n            where: {id:Number(id)}\n        })\n    }\n \n    @Role(permissionRole.updateTraining)\n    @Put(\":id/update\")\n    async trainingUpdate(\n        @Param(\"id\") id:string,\n        @Body() trainingData: {\n            name?: string,\n            addModules?: number[],\n            deleteModules?: number[]\n        }\n    ): Promise{\n        // Create relations with modules\n        if (trainingData.addModules) {\n            for(let i=0;i\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                setUserRole\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.deleteUser)@Delete(':id/delete')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getListUser)@Get('list')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.getUser)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        setUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserRole(userData: literal type, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Role(permissionRole.setRoleUser)@Put(':id/setrole')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupUser(userData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/controller/user.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n\tController,\n\tGet,\n\tParam,\n\tPost,\n\tBody,\n\tPut,\n\tDelete,\n\tNotFoundException,\n\tHttpException,\n\tHttpStatus,\n} from '@nestjs/common'\nimport { Public, Role } from 'src/auth/decorator'\nimport { UserService } from '../service/user.service'\nimport { User as UserModel } from '@prisma/client'\nimport { permissionRole } from \"src/auth/permissionRole\"\nconst argon2 = require(\"argon2\")\n\n@Controller('user')\nexport class UserController {\n\tconstructor(private readonly userService: UserService) {}\n\n\t@Role(\n\t\tpermissionRole.getListUser\n\t)\n\t@Get('list')\n\tasync getAllUsers(): Promise {\n\t  const allUsers = await this.userService.user.findMany({ take: 1000 })\n\t  return this.userService.strip_passwords(allUsers)\n\t}\n\n\t@Role(\n\t\tpermissionRole.getUser\n\t)\n\t@Get(':id')\n\tasync getUserById(@Param('id') id: string): Promise {\n\t\tconst u = await this.userService.user.findUnique({ \n\t\t\twhere: { id: Number(id)\t}\n\t\t});\n\t\treturn u ? this.userService.strip_password(u) : undefined\n\t}\n\n\t@Role(\n\t\tpermissionRole.setRoleUser\n\t)\n\t@Put(':id/setrole')\n\tasync setUserRole(\n\t\t@Body() userData: { roleId: number },\n\t\t@Param('id') id: string\n\t): Promise {\n\t  const u = await this.userService.user.update({\n\t\twhere: {\n\t\t  id: Number(id)\n\t\t},\n\t\tdata: {\n\t\t\troleId: userData.roleId\n\t\t},\n\t  })\n\t  return u ? this.userService.strip_password(u) : undefined\n\t}\n\n\t@Public()\n\t@Post('signup')\n\tasync signupUser(\n\t  @Body() userData: { name: string, password: string, roleId?: number },\n\t): Promise {\n\t\tif(userData.name === undefined || userData.password === undefined) throw new HttpException(\"name or password empty\", HttpStatus.BAD_REQUEST)\n\t  \tconst hash = await argon2.hash(userData.password)\n\t  \tconst u = await this.userService.user.create({\n\t\t\tdata: {\n\t\t\t  \tname: userData.name,\n\t\t\t  \tpassword: hash,\n\t\t\t  \troleId: userData.roleId\n\t\t\t},\n\t  \t})\n\t  \treturn this.userService.strip_password(u)\n\t}\n\n\t@Role(\n\t\tpermissionRole.deleteUser\n\t)\n\t@Delete(':id/delete')\n\tasync deleteUser(\n\t\t@Param(\"id\") id: string\n\t): Promise{\n\t\treturn this.userService.user.delete({\n\t\t\twhere: {id:Number(id)}\n\t\t})\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/service/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                strip_password\n                            \n                            \n                                strip_passwords\n                            \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        strip_password\n                        \n                    \n                \n            \n            \n                \nstrip_password(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/service/user.service.ts:8\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        User\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        strip_passwords\n                        \n                    \n                \n            \n            \n                \nstrip_passwords(users: User[])\n                \n            \n\n\n            \n                \n                    Defined in src/service/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    users\n                                    \n                                            User[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     User[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Inherited from         PrismaService\n\n                \n            \n            \n                \n                        Defined in         PrismaService:12\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Inherited from         PrismaService\n\n                \n            \n            \n                \n                        Defined in         PrismaService:8\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/prisma.service';\nimport { User } from '@prisma/client';\n\n@Injectable()\nexport class UserService extends PrismaService{\n  \n  strip_password(user: User) {\n    delete user[\"password\"]\n    return user\n  }\n  \n  strip_passwords(users: User[]): User[] {\n    users.forEach(u => {\n      u = this.strip_password(u)\n    });\n    return users\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            argon2\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constant.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/permissionRole.ts\n            \n            variable\n            permissionRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/controller/lesson.controller.ts\n            \n            controller\n            LessonController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/controller/module.controller.ts\n            \n            controller\n            ModuleController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/permission.controller.ts\n            \n            controller\n            PermissionController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/controller/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/controller/role.controller.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controller/training.controller.ts\n            \n            controller\n            TrainingController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/controller/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/controller/user.controller.ts\n            \n            variable\n            argon2\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma-client-exception/prisma-client-exception.filter.ts\n            \n            class\n            PrismaClientExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/service/auth.service.ts\n            \n            variable\n            argon2\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/service/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @prisma/client : ^4.15.0\n        \n            argon2 : ^0.30.3\n        \n            pg : ^8.11.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nSmall example app to manage a training center :\n\nMembers have a role (student or coach)\nEach role has specific permissions\nStudents can register into a Training (ex: \"Python\")\nTrainings contain Modules (ex: \"Introduction to Python\")\nModules contain Lessons (ex: \"Loops & flow structures\")\nAPI requires an auth token, which you can get through the /login endpoint\n\n\nDependencies\n\nPostgreSQL : Database\nNestJS : Main framework\nPrisma : ORM\n@nestjs/jwt : Authentication\nargon2 : Password hashing\npg : PostgreSQL integration\n\nInstallation\n\nCreate the database in PostgreSQL\nCopy .env.example as .env and change DB host/user/password\nRun npm install\n\nRunning the app\n# development mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\nEndpoints\nAuth\n\n POST /login (login with username & password, and get back an auth token)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\nrequired\nstring\nusername\n\n\npassword\nrequired\nstring\npassword\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\n \n\n\nTODO\napplication/json\n \n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" http://localhost:3000/login\n\n\n\n\nUser\n\n GET /user/{id} (get a specific User)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nUser id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nUser\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/user/1\n\n\n\n\n GET /user/list (get all Users. limit=1000)\n\nParameters\n\nNone\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nUser[]\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/user/list\n\n\n\n\n POST /user/signup (create/signup a new User)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nroleId\nrequired\nint\nN/A\n\n\nname\nrequired\nstring\nusername\n\n\npassword\nrequired\nstring\npassword (will be hashed)\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n201\napplication/json\nUser\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/user/signup\n\n\n\n\n DELETE /user/{id} (delete a User)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nUser id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nUser\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/user/1/delete\n\n\n\n\n PUT /user/{id}/setrole (update a User's role)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nUser id\n\n\nroleId\nrequired\nint\nroleId of the new role\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nUser\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/user/1/setrole\n\n\n\n\n\n\nTraining\n\n GET /training/{id} (get a specific Training)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nTraining id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nTraining\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/training/1\n\n\n\n\n GET /training/list (get all Trainings. limit=1000)\n\nParameters\n\nNone\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nTraining[]\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/training/list\n\n\n\n\n POST /training/create (create a new Training)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\nrequired\nstring\nName of the Training\n\n\nmodules\nrequired\nint[]\nArray of Module ids to include in this Training\n\n\ncoachId\nrequired\nint\nUser ID of the coach assigned to this module\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n201\napplication/json\nTraining\n\n\nTODO\napplication/json\n\n\n\n\n\nExample cURL\n\n curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/training/create\n\n\n\n\n DELETE /training/{id} (delete a Training)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nTraining id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nTraining\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/training/1/delete\n\n\n\n\n PUT /training/{id}/update (update a Training. Can add or delete associated Modules)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nTraining id\n\n\naddModules\noptional\nint[]\nlist of Modules to add to this Training\n\n\ndeleteModules\noptional\nint[]\nlist of Modules to delete from this Training\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nTraining\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/training/1/update\n\n\n\n\n\n\nModule\n\n GET /module/{id} (get a specific Module)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nModule id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nModule\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/module/1\n\n\n\n\n GET /module/list (get all Modules. limit=1000)\n\nParameters\n\nNone\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nModule[]\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/module/list\n\n\n\n\n POST /module/create (create a new Module)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\nrequired\nstring\nName of the Module\n\n\nlessons\noptional\nint[]\nArray of Lessons to include in this Module\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n201\napplication/json\nModule\n\n\nTODO\napplication/json\n\n\n\n\n\nExample cURL\n\n curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/module/create\n\n\n\n\n DELETE /module/{id} (delete a Module)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nModule id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nModule\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/module/1/delete\n\n\n\n\n PUT /module/{id}/update (update a Module. Can add or delete associated Lessons)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nModule id\n\n\naddLessons\noptional\nint[]\nlist of Lessons to add to this Module\n\n\ndeleteLessons\noptional\nint[]\nlist of Lessons to delete from this Module\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nModule\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/module/1/update\n\n\n\n\n\n\nLesson\n\n GET /lesson/{id} (get a specific Lesson)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nLesson id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nLesson\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/lesson/1\n\n\n\n\n GET /lesson/list (get all Lessons. limit=1000)\n\nParameters\n\nNone\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nLesson[]\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/lesson/list\n\n\n\n\n POST /lesson/create (create a new Lesson)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nName of the Lesson\n\n\ncontent\nrequired\nstring\nContent of the lesson\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n201\napplication/json\nLesson\n\n\nTODO\napplication/json\n\n\n\n\n\nExample cURL\n\n curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/lesson/create\n\n\n\n\n DELETE /lesson/{id} (delete a Lesson)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nLesson id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nLesson\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/lesson/1/delete\n\n\n\n\n PUT /lesson/{id}/update (update a Lesson)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nLesson id\n\n\ncontent\noptional\nstring\nLesson text content\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nLesson\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/lesson/1/update\n\n\n\n\n\n\nRole\n\n GET /role/{id} (get a specific Role)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nRole id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nRole\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/role/1\n\n\n\n\n GET /role/list (get all Roles. limit=1000)\n\nParameters\n\nNone\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nRole[]\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/role/list\n\n\n\n\n POST /role/create (create a new Role)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nName of the Role\n\n\npermissions\nrequired\nint[]\nArray of Roles to include in this Role\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n201\napplication/json\nRole\n\n\nTODO\napplication/json\n\n\n\n\n\nExample cURL\n\n curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/role/create\n\n\n\n\n DELETE /role/{id} (delete a Role)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nRole id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nRole\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/role/1/delete\n\n\n\n\n PUT /role/{id}/update (update a Role. Can add or delete associated Permissions)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nName of role\n\n\naddPermissions\noptional\nstring\nList of Permissions to add to this Role\n\n\ndeletePermissions\noptional\nstring\nList of Permissions to remove from this Role\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nRole\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/role/1/update\n\n\n\n\n\n\nPermission\n\n GET /permission/{id} (get a specific Permission)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nPermission id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nPermission\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/permission/1\n\n\n\n\n GET /permission/list (get all Permissions. limit=1000)\n\nParameters\n\nNone\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nPermission[]\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X GET -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/permission/list\n\n\n\n\n POST /permission/create (create a new Permission)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\nrequired\nstring\nName\n\n\ndescription\nrequired\nstring\nDescription\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n201\napplication/json\nPermission\n\n\nTODO\napplication/json\n\n\n\n\n\nExample cURL\n\n curl -X POST -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/permission/create\n\n\n\n\n DELETE /permission/{id} (delete a Permission)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nid\nrequired\nint\nPermission id\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nPermission\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" http://localhost:3000/permission/1/delete\n\n\n\n\n PUT /permission/{id}/update (update a Permission)\n\nParameters\n\n\n\n\nname\ntype\ndata type\ndescription\n\n\n\n\nname\noptional\nstring\nPermission name\n\n\ndescription\noptional\nstring\nPermission description\n\n\n\n\nResponses\n\n\n\n\nhttp code\ncontent-type\nresponse\n\n\n\n\n200\napplication/json\nPermission\n\n\n404\napplication/json\n{\"code\":\"404\",\"message\":\"Not Found\"}\n\n\n\n\nExample cURL\n\n curl -X PUT -H \"Content-Type: application/json\" -H \"Authorization: Bearer [token]\" -d data.json http://localhost:3000/permission/1/update\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAppModule\n\nAppModule\n\nAuthService  -->\n\nAppModule->AuthService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argon2   (prisma/.../seed.ts)\n                        \n                        \n                            argon2   (src/.../user.controller.ts)\n                        \n                        \n                            argon2   (src/.../auth.service.ts)\n                        \n                        \n                            fs   (src/.../role.controller.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constant.ts)\n                        \n                        \n                            permissionRole   (src/.../permissionRole.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            Public   (src/.../decorator.ts)\n                        \n                        \n                            Role   (src/.../decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        argon2\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"argon2\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/controller/user.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        argon2\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"argon2\")\n                    \n                \n\n\n        \n    \n\n    src/service/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        argon2\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"argon2\")\n                    \n                \n\n\n        \n    \n\n    src/controller/role.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        fs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"fs\")\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: number[][]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    secret: \"C'est un mot de passe vraiment secret et très difficile à trouver...\"\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/permissionRole.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        permissionRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\"getListPermission\":[1],\"getPermission\":[1],\"createPermission\":[1],\"deletePermission\":[1],\"updatePermission\":[1],\"getListRole\":[1],\"getRole\":[1],\"createRole\":[1],\"deleteRole\":[1],\"updateRole\":[1],\"getListUser\":[1,2],\"getUser\":[1,2],\"setRoleUser\":[1],\"deleteUser\":[1],\"getListLesson\":[1,2],\"getLesson\":[1,2],\"createLesson\":[1],\"updateLesson\":[1],\"deleteLesson\":[1],\"getListModule\":[1,2],\"getModule\":[1,2],\"createModule\":[1],\"deleteModule\":[1],\"updateModule\":[1],\"getListTraining\":[1,2],\"getTraining\":[1,2],\"createTraining\":[1],\"deleteTraining\":[1],\"updateTraining\":[1],\"subscribe\":[1,2],\"lessonValidation\":[1,2],\"getTrainingStudents\":[1,2]}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
