// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role{
  id Int @id @default(autoincrement())
  name String
  permission RolePermission[]
  user User[]
}

model Permission{
  id Int @id @default(autoincrement())
  name String
  description String @db.VarChar(255)
  role RolePermission[]
}

model RolePermission{
  id Int @id @default(autoincrement())
  role Role @relation(fields:[roleId], references: [id])
  roleId Int
  permission Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
}

model User{
  id Int @id @default(autoincrement())
  name String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  role Role @relation(fields:[roleId], references: [id])
  roleId Int @default(2)
  formation FormationUser[]
  lessonEcrite Lesson[]
  lessonSuivit UserLesson[]
}

model Formation{
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user FormationUser[]
  module FormationModule[]
}

model FormationUser{
  id Int @id @default(autoincrement())
  user User @relation(fields:[userId], references: [id])
  userId Int
  userIsCoach Boolean @default(false)
  formation Formation @relation(fields:[formationId], references: [id])
  formationId Int
}

model Module{
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  formation FormationModule[]
}

model FormationModule{
  id Int @id @default(autoincrement())
  module Module @relation(fields: [moduleId], references: [id])
  moduleId Int
  formation Formation @relation(fields: [formationId], references: [id])
  formationId Int
}

model Lesson{
  id Int @id @default(autoincrement())
  name String
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user User @relation(fields:[author], references: [id])
  author Int
  apprenants UserLesson[]
}

model UserLesson{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  is_finished Boolean @default(false)
}