// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  permissions RolePermission[]
  users       User[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String           @db.VarChar(255)
  roles       RolePermission[]
}

model User {
  id              Int             @id @default(autoincrement())
  name            String
  password        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  role            Role?           @relation(fields: [roleId], references: [id])
  roleId          Int?            @default(2)
  formations      FormationUser[]
  lessons         UserLesson[]
  coached         Formation[]
  lessonsAuthored Lesson[]
}

model Formation {
  id        Int               @id @default(autoincrement())
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  users     FormationUser[]
  coach     User?             @relation(fields: [coachId], references: [id], onDelete: SetNull)
  coachId   Int?
  modules   FormationModule[]
}

model FormationUser {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      Int
  formation   Formation @relation(fields: [formationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  formationId Int
}

model Module {
  id        Int               @id @default(autoincrement())
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  formation FormationModule[]
  lesson    ModuleLesson[]
}

model FormationModule {
  id          Int       @id @default(autoincrement())
  module      Module    @relation(fields: [moduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  moduleId    Int
  formation   Formation @relation(fields: [formationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  formationId Int
}

model Lesson {
  id        Int            @id @default(autoincrement())
  name      String
  content   String         @db.Text
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  author    User?          @relation(fields: [authorId], references: [id])
  authorId  Int?
  students  UserLesson[]
  modules   ModuleLesson[]
}

model UserLesson {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     Int
  lesson     Lesson  @relation(fields: [lessonId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lessonId   Int
  isFinished Boolean @default(false)
}

model ModuleLesson {
  id       Int    @id @default(autoincrement())
  module   Module @relation(fields: [moduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  moduleId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lessonId Int
}
